"use strict";(self.webpackChunkpanovista=self.webpackChunkpanovista||[]).push([[1520],{748:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>a});var r=n(4848),s=n(8453);const i={title:"\u5b50\u6811\u4e2d\u662f\u5426\u6709\u53e6\u4e00\u68f5\u5b50\u6811",sidebar_position:1,slug:"\u5b50\u6811\u4e2d\u662f\u5426\u6709\u53e6\u4e00\u68f5\u5b50\u6811"},l="\u5b50\u6811\u4e2d\u662f\u5426\u6709\u53e6\u4e00\u68f5\u5b50\u6811",o={id:"dsa/leetcode/\u6811\u76f8\u5173/\u5b50\u6811\u4e2d\u662f\u5426\u6709\u53e6\u4e00\u68f5\u5b50\u6811",title:"\u5b50\u6811\u4e2d\u662f\u5426\u6709\u53e6\u4e00\u68f5\u5b50\u6811",description:"\u529b\u6263\u5b98\u65b9\u9898\u89e3: \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5e8f\u5217\u4e0a\u505a\u4e32\u5339\u914d",source:"@site/docs/dsa/leetcode/\u6811\u76f8\u5173/\u5b50\u6811\u4e2d\u662f\u5426\u6709\u53e6\u4e00\u68f5\u5b50\u6811.mdx",sourceDirName:"dsa/leetcode/\u6811\u76f8\u5173",slug:"/dsa/leetcode/\u6811\u76f8\u5173/\u5b50\u6811\u4e2d\u662f\u5426\u6709\u53e6\u4e00\u68f5\u5b50\u6811",permalink:"/docs/dsa/leetcode/\u6811\u76f8\u5173/\u5b50\u6811\u4e2d\u662f\u5426\u6709\u53e6\u4e00\u68f5\u5b50\u6811",draft:!1,unlisted:!1,editUrl:"https://github.com/wangenius/wangenius.github.io/tree/master/docs/dsa/leetcode/\u6811\u76f8\u5173/\u5b50\u6811\u4e2d\u662f\u5426\u6709\u53e6\u4e00\u68f5\u5b50\u6811.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"\u5b50\u6811\u4e2d\u662f\u5426\u6709\u53e6\u4e00\u68f5\u5b50\u6811",sidebar_position:1,slug:"\u5b50\u6811\u4e2d\u662f\u5426\u6709\u53e6\u4e00\u68f5\u5b50\u6811"},sidebar:"leetcode",previous:{title:"\u4e8c\u53c9\u6811\u7684\u76f4\u5f84",permalink:"/docs/dsa/leetcode/\u6811\u76f8\u5173/\u4e8c\u53c9\u6811\u7684\u76f4\u5f84"},next:{title:"\u6811\u76f8\u5173",permalink:"/docs/dsa/leetcode/\u6811\u76f8\u5173/\u4e8c\u53c9\u641c\u7d22\u6811"}},d={},a=[{value:"\u529b\u6263\u5b98\u65b9\u9898\u89e3: \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5e8f\u5217\u4e0a\u505a\u4e32\u5339\u914d",id:"\u529b\u6263\u5b98\u65b9\u9898\u89e3-\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5e8f\u5217\u4e0a\u505a\u4e32\u5339\u914d",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"\u5b50\u6811\u4e2d\u662f\u5426\u6709\u53e6\u4e00\u68f5\u5b50\u6811",children:"\u5b50\u6811\u4e2d\u662f\u5426\u6709\u53e6\u4e00\u68f5\u5b50\u6811"}),"\n",(0,r.jsx)(t.h2,{id:"\u529b\u6263\u5b98\u65b9\u9898\u89e3-\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5e8f\u5217\u4e0a\u505a\u4e32\u5339\u914d",children:"\u529b\u6263\u5b98\u65b9\u9898\u89e3: \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5e8f\u5217\u4e0a\u505a\u4e32\u5339\u914d"}),"\n",(0,r.jsx)(t.p,{children:"\u8fd9\u4e2a\u65b9\u6cd5\u9700\u8981\u6211\u4eec\u5148\u4e86\u89e3\u4e00\u4e2a\u300c\u5c0f\u5957\u8def\u300d\uff1a\u4e00\u68f5\u5b50\u6811\u4e0a\u7684\u70b9\u5728\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5e8f\u5217\uff08\u5373\u5148\u5e8f\u904d\u5386\uff09\u4e2d\u662f\u8fde\u7eed\u7684\u3002\u4e86\u89e3\u4e86\u8fd9\u4e2a\u300c\u5c0f\u5957\u8def\u300d\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u5411\u5c31\u662f\uff1a\u628a sss \u548c ttt \u5148\u8f6c\u6362\u6210\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5e8f\u5217\uff0c\u7136\u540e\u770b ttt \u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5e8f\u5217\u662f\u5426\u662f sss \u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5e8f\u5217\u7684\u300c\u5b50\u4e32\u300d\u3002"}),"\n",(0,r.jsx)(t.p,{children:"\u8fd9\u6837\u505a\u6b63\u786e\u5417\uff1f \u5047\u8bbe sss \u7531\u4e24\u4e2a\u70b9\u7ec4\u6210\uff0c111 \u662f\u6839\uff0c222 \u662f 111 \u7684\u5de6\u5b69\u5b50\uff1bttt \u4e5f\u7531\u4e24\u4e2a\u70b9\u7ec4\u6210\uff0c111 \u662f\u6839\uff0c222 \u662f 111 \u7684\u53f3\u5b69\u5b50\u3002\u8fd9\u6837\u4e00\u6765 sss \u548c ttt \u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5e8f\u5217\u76f8\u540c\uff0c\u53ef\u662f ttt \u5e76\u4e0d\u662f sss \u7684\u67d0\u4e00\u68f5\u5b50\u6811\u3002\u7531\u6b64\u53ef\u89c1\u300csss \u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5e8f\u5217\u5305\u542b ttt \u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5e8f\u5217\u300d\u662f\u300cttt \u662f sss \u5b50\u6811\u300d\u7684\u5fc5\u8981\u4e0d\u5145\u5206\u6761\u4ef6\uff0c\u6240\u4ee5\u5355\u7eaf\u8fd9\u6837\u505a\u662f\u4e0d\u6b63\u786e\u7684\u3002"}),"\n",(0,r.jsx)(t.p,{children:"\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5f15\u5165\u4e24\u4e2a\u7a7a\u503c lNull \u548c rNull\uff0c\u5f53\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u6216\u8005\u53f3\u5b69\u5b50\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u5c31\u63d2\u5165\u8fd9\u4e24\u4e2a\u7a7a\u503c\uff0c\u8fd9\u6837\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5e8f\u5217\u5c31\u552f\u4e00\u5bf9\u5e94\u4e00\u68f5\u6811\u3002\u5904\u7406\u5b8c\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u5224\u65ad\u300csss \u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5e8f\u5217\u5305\u542b ttt \u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5e8f\u5217\u300d\u6765\u5224\u65ad\u7b54\u6848\u3002"}),"\n",(0,r.jsx)(t.p,{children:"\u5728\u5224\u65ad\u300csss \u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5e8f\u5217\u5305\u542b ttt \u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5e8f\u5217\u300d\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u66b4\u529b\u5339\u914d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 KMP \u6216\u8005 Rabin-Karp \u7b97\u6cd5\uff0c\u5728\u4f7f\u7528 Rabin-Karp\u7b97\u6cd5\u7684\u65f6\u5019\uff0c\u8981\u6ce8\u610f\u4e32\u4e2d\u53ef\u80fd\u6709\u8d1f\u503c\u3002"}),"\n",(0,r.jsx)(t.p,{children:"\u8fd9\u91cc\u7ed9\u51fa\u7528 KMP \u5224\u65ad\u7684\u4ee3\u7801\u5b9e\u73b0\u3002"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector <int> sOrder, tOrder;\n    int maxElement, lNull, rNull;\n    // \u83b7\u53d6\u6811\u4e2d\u7684\u6700\u5927\u503c.\n    void getMaxElement(TreeNode *node) {\n        if (!node) return;\n        maxElement = max(maxElement, node->val);\n        getMaxElement(node->left);\n        getMaxElement(node->right);\n    }\n    //\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u904d\u5386\n    void getDfsOrder(TreeNode *node, vector <int> &tar) {\n        if (!node) return;\n        tar.push_back(node->val);\n        if (node->left) getDfsOrder(node->left, tar);\n        else tar.push_back(lNull);\n        if (node->right) getDfsOrder(node->right, tar);\n        else tar.push_back(rNull);\n    }\n\n    bool kmp() {\n        int sLen = sOrder.size(), tLen = tOrder.size();\n        vector <int> next(tOrder.size(), -1);\n        // \u751f\u6210\u6a21\u5f0f\u4e32\u8df3\u8f6c\u6570\u7ec4\n        for (int i = 1, j = -1; i < tLen; ++i) {\n            while (j != -1 && tOrder[i] != tOrder[j + 1]) \n                j = next[j];\n            if (tOrder[i] == tOrder[j + 1]) ++j;\n            next[i] = j;\n        }\n        for (int i = 0, j = -1; i < sLen; ++i) {\n            while (j != -1 && sOrder[i] != tOrder[j + 1])\n                j = next[j];\n            if (sOrder[i] == tOrder[j + 1]) ++j;\n            if (j == tLen - 1) return true;\n        }\n        return false;\n    }\n\n    bool isSubtree(TreeNode* s, TreeNode* t) {\n        // \u521d\u59cb\u5316lNull\u548crNull, \u4e3a\u6df1\u5ea6\u904d\u5386\u505a\u51c6\u5907\n        maxElement = INT_MIN;\n        getMaxElement(s);\n        getMaxElement(t);\n        lNull = maxElement + 1;\n        rNull = maxElement + 2;\n\n        getDfsOrder(s, sOrder);\n        getDfsOrder(t, tOrder);\n\n        return kmp();\n    }\n};\n\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var r=n(6540);const s={},i=r.createContext(s);function l(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);