"use strict";(self.webpackChunkpanovista=self.webpackChunkpanovista||[]).push([[127],{4144:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>a});var t=r(4848),o=r(8453);const s={},i="\u6811\u76f8\u5173",l={id:"dsa/leetcode/\u6811\u76f8\u5173/\u4e8c\u53c9\u641c\u7d22\u6811",title:"\u6811\u76f8\u5173",description:"\u4e8c\u53c9\u641c\u7d22\u6811",source:"@site/docs/dsa/leetcode/\u6811\u76f8\u5173/\u4e8c\u53c9\u641c\u7d22\u6811.mdx",sourceDirName:"dsa/leetcode/\u6811\u76f8\u5173",slug:"/dsa/leetcode/\u6811\u76f8\u5173/\u4e8c\u53c9\u641c\u7d22\u6811",permalink:"/docs/dsa/leetcode/\u6811\u76f8\u5173/\u4e8c\u53c9\u641c\u7d22\u6811",draft:!1,unlisted:!1,editUrl:"https://github.com/wangenius/wangenius.github.io/tree/master/docs/dsa/leetcode/\u6811\u76f8\u5173/\u4e8c\u53c9\u641c\u7d22\u6811.mdx",tags:[],version:"current",frontMatter:{},sidebar:"leetcode",previous:{title:"\u5355\u8c03\u6808",permalink:"/docs/dsa/leetcode/\u6808\u76f8\u5173/\u5355\u8c03\u6808"},next:{title:"\u53cd\u8f6c\u94fe\u8868",permalink:"/docs/dsa/leetcode/\u94fe\u8868\u76f8\u5173/\u53cd\u8f6c\u94fe\u8868"}},d={},a=[{value:"\u4e8c\u53c9\u641c\u7d22\u6811",id:"\u4e8c\u53c9\u641c\u7d22\u6811",level:2},{value:"\u5e73\u8861\u4e8c\u53c9\u6811",id:"\u5e73\u8861\u4e8c\u53c9\u6811",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"\u6811\u76f8\u5173",children:"\u6811\u76f8\u5173"}),"\n",(0,t.jsx)(n.h2,{id:"\u4e8c\u53c9\u641c\u7d22\u6811",children:"\u4e8c\u53c9\u641c\u7d22\u6811"}),"\n",(0,t.jsx)(n.p,{children:"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u5176\u4e2d\u5143\u7d20\u5df2\u7ecf\u6309 \u5347\u5e8f \u6392\u5217\uff0c\u8bf7\u4f60\u5c06\u5176\u8f6c\u6362\u4e3a\u4e00\u68f5 \u5e73\u8861 \u4e8c\u53c9\u641c\u7d22\u6811\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Solution{\nprivate:\n    TreeNode *buildTree(vector<int> &nums, int start, int end)\n    {\n        if (start > end) return nullptr;\n        int mid = start + ((end - start) >> 1);\n        TreeNode *root = new TreeNode(nums[mid]);\n        root->left = buildTree(nums, start, mid - 1);\n        root->right = buildTree(nums, mid + 1, end);\n        return root;\n    }\npublic:\n    TreeNode *sortedArrayToBST(vector<int> &nums)\n    {\n        return buildTree(nums, 0, nums.size() - 1);\n    }\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u5e73\u8861\u4e8c\u53c9\u6811",children:"\u5e73\u8861\u4e8c\u53c9\u6811"}),"\n",(0,t.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5b83\u662f\u5426\u662f \u5e73\u8861\u4e8c\u53c9\u6811"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Solution {\nprivate:\n    //\u904d\u5386\u67e5\u770b\u5206\u652f\u6df1\u5ea6\n    int traverse(TreeNode* node){\n        if(node == nullptr) return 0;\n        //\u8fd4\u56de\u4e00\u4e2a\u6df1\u5ea6\n        int l = 0,r = 0;\n        l = traverse(node -> left);\n        if(l == -1) return -1;\n        r = traverse(node -> right);\n        if(r == -1) return -1;\n        if(l - r >= 2 || r - l >= 2) return -1;\n        return max(l,r) + 1;\n    }\npublic:\n    bool isBalanced(TreeNode* root) {\n        return ! (traverse(root) == -1);\n    }\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5c0f\u6df1\u5ea6\u3002"}),"\n",(0,t.jsx)(n.p,{children:"\u6700\u5c0f\u6df1\u5ea6\u662f\u4ece\u6839\u8282\u70b9\u5230\u6700\u8fd1\u53f6\u5b50\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u91cf\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Solution {\nprivate:\n    int traverse(TreeNode* node){\n        if(node -> left == nullptr && node -> right == nullptr)\n        return 1;\n        if (node -> left == nullptr)\n            return traverse(node -> right) + 1;\n        else if(node -> right == nullptr)\n            return traverse(node -> left) + 1;\n        return min(traverse(node -> left), traverse(node -> right)) + 1;\n    }\npublic:\n    int minDepth(TreeNode* root) {\n        if(root == nullptr) return 0;\n        return traverse(root);\n    }\n};\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Solution\n{\n\nprivate:\n    bool traverse(TreeNode *node, int &sum, int &target)\n    {\n        if (node)\n            sum += node->val;\n        else\n            return false;\n\n        if (!node->left && !node->right)\n        {\n            if (sum == target)\n                return true;\n        }\n        else\n        {\n            if (traverse(node->left, sum, target))\n                return true;\n            if (traverse(node->right, sum, target))\n                return true;\n        }\n        sum -= node->val;\n        return false;\n    }\n\npublic:\n    bool hasPathSum(TreeNode *root, int targetSum)\n    {\n        int sum = 0;\n        return traverse(root, sum, targetSum);\n    }\n};\n"})})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var t=r(6540);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);