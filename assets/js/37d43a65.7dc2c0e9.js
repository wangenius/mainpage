"use strict";(self.webpackChunkwangenius=self.webpackChunkwangenius||[]).push([[3102],{6504:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var t=r(4848),i=r(8453);const o={title:"clone",sidebar_position:5,slug:"clone"},s="clone",a={id:"lang/rust/\u7279\u5f81/clone",title:"clone",description:"\u5904\u7406\u8d44\u6e90\u65f6\uff0c\u9ed8\u8ba4\u884c\u4e3a\u662f\u5728\u8d4b\u503c\u6216\u51fd\u6570\u8c03\u7528\u671f\u95f4\u4f20\u8f93\u5b83\u4eec\u3002\u4f46\u662f\uff0c\u6709\u65f6\u6211\u4eec\u4e5f\u9700\u8981\u590d\u5236\u8d44\u6e90\u3002",source:"@site/docs/lang/rust/\u7279\u5f81/clone.mdx",sourceDirName:"lang/rust/\u7279\u5f81",slug:"/lang/rust/\u7279\u5f81/clone",permalink:"/mainpage/docs/lang/rust/\u7279\u5f81/clone",draft:!1,unlisted:!1,editUrl:"https://github.com/wangenius/mainpage/tree/master/docs/lang/rust/\u7279\u5f81/clone.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"clone",sidebar_position:5,slug:"clone"},sidebar:"rust",previous:{title:"impl trait",permalink:"/mainpage/docs/lang/rust/\u7279\u5f81/impl trait"},next:{title:"\u6ce8\u89e3",permalink:"/mainpage/docs/lang/rust/\u7279\u5f81/\u6ce8\u89e3"}},l={},c=[];function p(n){const e={code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"clone",children:"clone"}),"\n",(0,t.jsx)(e.p,{children:"\u5904\u7406\u8d44\u6e90\u65f6\uff0c\u9ed8\u8ba4\u884c\u4e3a\u662f\u5728\u8d4b\u503c\u6216\u51fd\u6570\u8c03\u7528\u671f\u95f4\u4f20\u8f93\u5b83\u4eec\u3002\u4f46\u662f\uff0c\u6709\u65f6\u6211\u4eec\u4e5f\u9700\u8981\u590d\u5236\u8d44\u6e90\u3002"}),"\n",(0,t.jsx)(e.p,{children:"Clone \u7279\u6027\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u6700\u5e38\u89c1\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Clone \u7279\u5f81\u5b9a\u4e49\u7684 .clone() \u65b9\u6cd5\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-rust",children:'// A unit struct without resources\r\n#[derive(Debug, Clone, Copy)]\r\nstruct Unit;\r\n\r\n// A tuple struct with resources that implements the `Clone` trait\r\n#[derive(Clone, Debug)]\r\nstruct Pair(Box<i32>, Box<i32>);\r\n\r\nfn main() {\r\n    // Instantiate `Unit`\r\n    let unit = Unit;\r\n    // Copy `Unit`, there are no resources to move\r\n    let copied_unit = unit;\r\n\r\n    // Both `Unit`s can be used independently\r\n    println!("original: {:?}", unit);\r\n    println!("copy: {:?}", copied_unit);\r\n\r\n    // Instantiate `Pair`\r\n    let pair = Pair(Box::new(1), Box::new(2));\r\n    println!("original: {:?}", pair);\r\n\r\n    // Move `pair` into `moved_pair`, moves resources\r\n    let moved_pair = pair;\r\n    println!("moved: {:?}", moved_pair);\r\n\r\n    // Error! `pair` has lost its resources\r\n    //println!("original: {:?}", pair);\r\n    // TODO ^ Try uncommenting this line\r\n\r\n    // Clone `moved_pair` into `cloned_pair` (resources are included)\r\n    let cloned_pair = moved_pair.clone();\r\n    // Drop the moved original pair using std::mem::drop\r\n    drop(moved_pair);\r\n\r\n    // Error! `moved_pair` has been dropped\r\n    //println!("moved and dropped: {:?}", moved_pair);\r\n    // TODO ^ Try uncommenting this line\r\n\r\n    // The result from .clone() can still be used!\r\n    println!("clone: {:?}", cloned_pair);\r\n}\n'})})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(p,{...n})}):p(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>s,x:()=>a});var t=r(6540);const i={},o=t.createContext(i);function s(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);