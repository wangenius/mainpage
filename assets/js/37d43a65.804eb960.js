"use strict";(self.webpackChunkpanovista=self.webpackChunkpanovista||[]).push([[3102],{4123:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(4848),o=t(8453);const i={title:"clone",sidebar_position:5,slug:"clone"},s="clone",l={id:"lang/rust/\u7279\u5f81/clone",title:"clone",description:"\u5904\u7406\u8d44\u6e90\u65f6\uff0c\u9ed8\u8ba4\u884c\u4e3a\u662f\u5728\u8d4b\u503c\u6216\u51fd\u6570\u8c03\u7528\u671f\u95f4\u4f20\u8f93\u5b83\u4eec\u3002\u4f46\u662f\uff0c\u6709\u65f6\u6211\u4eec\u4e5f\u9700\u8981\u590d\u5236\u8d44\u6e90\u3002",source:"@site/docs/lang/rust/\u7279\u5f81/clone.mdx",sourceDirName:"lang/rust/\u7279\u5f81",slug:"/lang/rust/\u7279\u5f81/clone",permalink:"/docs/lang/rust/\u7279\u5f81/clone",draft:!1,unlisted:!1,editUrl:"https://github.com/wangenius/wangenius.github.io/tree/master/docs/lang/rust/\u7279\u5f81/clone.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"clone",sidebar_position:5,slug:"clone"},sidebar:"rust",previous:{title:"impl trait",permalink:"/docs/lang/rust/\u7279\u5f81/impl trait"},next:{title:"\u6ce8\u89e3",permalink:"/docs/lang/rust/\u7279\u5f81/\u6ce8\u89e3"}},a={},c=[];function p(n){const e={code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"clone",children:"clone"}),"\n",(0,r.jsx)(e.p,{children:"\u5904\u7406\u8d44\u6e90\u65f6\uff0c\u9ed8\u8ba4\u884c\u4e3a\u662f\u5728\u8d4b\u503c\u6216\u51fd\u6570\u8c03\u7528\u671f\u95f4\u4f20\u8f93\u5b83\u4eec\u3002\u4f46\u662f\uff0c\u6709\u65f6\u6211\u4eec\u4e5f\u9700\u8981\u590d\u5236\u8d44\u6e90\u3002"}),"\n",(0,r.jsx)(e.p,{children:"Clone \u7279\u6027\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u6700\u5e38\u89c1\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Clone \u7279\u5f81\u5b9a\u4e49\u7684 .clone() \u65b9\u6cd5\u3002"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:'// A unit struct without resources\n#[derive(Debug, Clone, Copy)]\nstruct Unit;\n\n// A tuple struct with resources that implements the `Clone` trait\n#[derive(Clone, Debug)]\nstruct Pair(Box<i32>, Box<i32>);\n\nfn main() {\n    // Instantiate `Unit`\n    let unit = Unit;\n    // Copy `Unit`, there are no resources to move\n    let copied_unit = unit;\n\n    // Both `Unit`s can be used independently\n    println!("original: {:?}", unit);\n    println!("copy: {:?}", copied_unit);\n\n    // Instantiate `Pair`\n    let pair = Pair(Box::new(1), Box::new(2));\n    println!("original: {:?}", pair);\n\n    // Move `pair` into `moved_pair`, moves resources\n    let moved_pair = pair;\n    println!("moved: {:?}", moved_pair);\n\n    // Error! `pair` has lost its resources\n    //println!("original: {:?}", pair);\n    // TODO ^ Try uncommenting this line\n\n    // Clone `moved_pair` into `cloned_pair` (resources are included)\n    let cloned_pair = moved_pair.clone();\n    // Drop the moved original pair using std::mem::drop\n    drop(moved_pair);\n\n    // Error! `moved_pair` has been dropped\n    //println!("moved and dropped: {:?}", moved_pair);\n    // TODO ^ Try uncommenting this line\n\n    // The result from .clone() can still be used!\n    println!("clone: {:?}", cloned_pair);\n}\n'})})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(p,{...n})}):p(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>l});var r=t(6540);const o={},i=r.createContext(o);function s(n){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);