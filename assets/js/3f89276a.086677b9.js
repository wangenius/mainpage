"use strict";(self.webpackChunkpanovista=self.webpackChunkpanovista||[]).push([[619],{9659:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=t(4848),r=t(8453);const a={title:"\u6cdb\u578b",sidebar_position:2,slug:"\u6cdb\u578b"},s="\u6cdb\u578b",l={id:"lang/rust/\u6570\u636e\u7c7b\u578b/\u6cdb\u578b",title:"\u6cdb\u578b",description:"\u6cdb\u578b\u662f\u5c06\u7c7b\u578b\u548c\u529f\u80fd\u6982\u62ec\u5230\u66f4\u5e7f\u6cdb\u7684\u60c5\u51b5\u7684\u4e3b\u9898\u3002\u8fd9\u5bf9\u4e8e\u4ee5\u591a\u79cd\u65b9\u5f0f\u51cf\u5c11\u4ee3\u7801\u91cd\u590d\u975e\u5e38\u6709\u7528\uff0c\u4f46\u53ef\u80fd\u9700\u8981\u76f8\u5f53\u590d\u6742\u7684\u8bed\u6cd5\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6cdb\u578b\u9700\u8981\u975e\u5e38\u5c0f\u5fc3\u5730\u6307\u5b9a\u6cdb\u578b\u7c7b\u578b\u5b9e\u9645\u4e0a\u88ab\u8ba4\u4e3a\u662f\u6709\u6548\u7684\u7c7b\u578b\u3002\u6cdb\u578b\u6700\u7b80\u5355\u4e14\u6700\u5e38\u89c1\u7684\u7528\u9014\u662f\u7528\u4e8e\u7c7b\u578b\u53c2\u6570\u3002",source:"@site/docs/lang/rust/\u6570\u636e\u7c7b\u578b/\u6cdb\u578b.mdx",sourceDirName:"lang/rust/\u6570\u636e\u7c7b\u578b",slug:"/lang/rust/\u6570\u636e\u7c7b\u578b/\u6cdb\u578b",permalink:"/docs/lang/rust/\u6570\u636e\u7c7b\u578b/\u6cdb\u578b",draft:!1,unlisted:!1,editUrl:"https://github.com/wangenius/wangenius.github.io/tree/master/docs/lang/rust/\u6570\u636e\u7c7b\u578b/\u6cdb\u578b.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"\u6cdb\u578b",sidebar_position:2,slug:"\u6cdb\u578b"},sidebar:"rust",previous:{title:"\u590d\u5408\u7c7b\u578b",permalink:"/docs/lang/rust/\u6570\u636e\u7c7b\u578b/\u590d\u5408\u7c7b\u578b"},next:{title:"\u81ea\u5b9a\u4e49\u7c7b\u578b",permalink:"/docs/lang/rust/\u6570\u636e\u7c7b\u578b/\u81ea\u5b9a\u4e49\u7c7b\u578b"}},o={},c=[{value:"\u51fd\u6570",id:"\u51fd\u6570",level:2},{value:"implementation",id:"implementation",level:2},{value:"trait",id:"trait",level:2},{value:"bounds",id:"bounds",level:2},{value:"MultiBounds",id:"multibounds",level:2},{value:"where\u5b50\u53e5",id:"where\u5b50\u53e5",level:2},{value:"New type idiom",id:"new-type-idiom",level:2},{value:"Associated items",id:"associated-items",level:2},{value:"\u5173\u8054\u7c7b\u578b",id:"\u5173\u8054\u7c7b\u578b",level:3},{value:"\u5e7b\u60f3\u7c7b\u578b\u53c2\u6570",id:"\u5e7b\u60f3\u7c7b\u578b\u53c2\u6570",level:2}];function p(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"\u6cdb\u578b",children:"\u6cdb\u578b"}),"\n",(0,i.jsx)(e.p,{children:"\u6cdb\u578b\u662f\u5c06\u7c7b\u578b\u548c\u529f\u80fd\u6982\u62ec\u5230\u66f4\u5e7f\u6cdb\u7684\u60c5\u51b5\u7684\u4e3b\u9898\u3002\u8fd9\u5bf9\u4e8e\u4ee5\u591a\u79cd\u65b9\u5f0f\u51cf\u5c11\u4ee3\u7801\u91cd\u590d\u975e\u5e38\u6709\u7528\uff0c\u4f46\u53ef\u80fd\u9700\u8981\u76f8\u5f53\u590d\u6742\u7684\u8bed\u6cd5\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6cdb\u578b\u9700\u8981\u975e\u5e38\u5c0f\u5fc3\u5730\u6307\u5b9a\u6cdb\u578b\u7c7b\u578b\u5b9e\u9645\u4e0a\u88ab\u8ba4\u4e3a\u662f\u6709\u6548\u7684\u7c7b\u578b\u3002\u6cdb\u578b\u6700\u7b80\u5355\u4e14\u6700\u5e38\u89c1\u7684\u7528\u9014\u662f\u7528\u4e8e\u7c7b\u578b\u53c2\u6570\u3002"}),"\n",(0,i.jsxs)(e.p,{children:["\u901a\u8fc7\u4f7f\u7528\u5c16\u62ec\u53f7\u548c\u5927\u9a7c\u5cf0\u5f0f\u5927\u5c0f\u5199\u5c06\u7c7b\u578b\u53c2\u6570\u6307\u5b9a\u4e3a\u6cdb\u578b\uff1a ",(0,i.jsx)(e.code,{children:"<Aaa, Bbb, ...>"})," \u3002 \u201c\u901a\u7528\u7c7b\u578b\u53c2\u6570\u201d\u901a\u5e38\u8868\u793a\u4e3a ",(0,i.jsx)(e.code,{children:"<T>"})," \u3002\u5728 Rust \u4e2d\uff0c\u201c\u6cdb\u578b\u201d\u8fd8\u63cf\u8ff0\u4e86\u4efb\u4f55\u63a5\u53d7\u4e00\u4e2a\u6216\u591a\u4e2a\u6cdb\u578b\u7c7b\u578b\u53c2\u6570 ",(0,i.jsx)(e.code,{children:"<T>"})," \u7684\u4e8b\u7269\u3002\u6307\u5b9a\u4e3a\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u7684\u4efb\u4f55\u7c7b\u578b\u90fd\u662f\u6cdb\u578b\uff0c\u5176\u4ed6\u6240\u6709\u7c7b\u578b\u90fd\u662f\u5177\u4f53\u7684\uff08\u975e\u6cdb\u578b\uff09\u3002"]}),"\n",(0,i.jsx)(e.p,{children:"\u4f8b\u5982\uff0c\u5b9a\u4e49\u4e00\u4e2a\u540d\u4e3a foo \u7684\u6cdb\u578b\u51fd\u200b\u200b\u6570\uff0c\u5b83\u63a5\u53d7\u4efb\u4f55\u7c7b\u578b\u7684\u53c2\u6570 T \uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:"fn foo<T>(arg: T) { ... }\n"})}),"\n",(0,i.jsxs)(e.p,{children:["\u7531\u4e8e T \u5df2\u4f7f\u7528 ",(0,i.jsx)(e.code,{children:"<T>"})," \u6307\u5b9a\u4e3a\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\uff0c\u56e0\u6b64\u5728\u6b64\u5904\u7528\u4f5c (arg: T) \u65f6\uff0c\u5b83\u88ab\u89c6\u4e3a\u6cdb\u578b\u3002\u5373\u4f7f T \u4e4b\u524d\u5df2\u88ab\u5b9a\u4e49\u4e3a struct \uff0c\u60c5\u51b5\u4e5f\u662f\u5982\u6b64\u3002"]}),"\n",(0,i.jsx)(e.p,{children:"\u6b64\u793a\u4f8b\u663e\u793a\u4e86\u4e00\u4e9b\u5b9e\u9645\u8bed\u6cd5\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:"// A concrete type `A`.\nstruct A;\n\n// In defining the type `Single`, the first use of `A` is not preceded by `<A>`.\n// Therefore, `Single` is a concrete type, and `A` is defined as above.\nstruct Single(A);\n//            ^ Here is `Single`s first use of the type `A`.\n\n// Here, `<T>` precedes the first use of `T`, so `SingleGen` is a generic type.\n// Because the type parameter `T` is generic, it could be anything, including\n// the concrete type `A` defined at the top.\nstruct SingleGen<T>(T);\n\nfn main() {\n    // `Single` is concrete and explicitly takes `A`.\n    let _s = Single(A);\n\n    // Create a variable `_char` of type `SingleGen<char>`\n    // and give it the value `SingleGen('a')`.\n    // Here, `SingleGen` has a type parameter explicitly specified.\n    let _char: SingleGen<char> = SingleGen('a');\n\n    // `SingleGen` can also have a type parameter implicitly specified:\n    let _t    = SingleGen(A); // Uses `A` defined at the top.\n    let _i32  = SingleGen(6); // Uses `i32`.\n    let _char = SingleGen('a'); // Uses `char`.\n}\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:'fn add<T>(a:T, b:T)->T{\n    a+b  // \u7f16\u8bd1\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3a\u4e0d\u662f\u6240\u6709\u7684\u7c7b\u578b\u90fd\u80fd\u76f8\u52a0\uff0c\u9700\u8981\u4f7f\u7528trait\u5bf9T\u8fdb\u884c\u9650\u5236,\u6211\u4eec\u79f0\u4e4b\u4e3a\u7279\u5f81\u7ea6\u675f\n}\n\nstruct Point<T,U> { // struct\u4e2d\u4f7f\u7528\u6cdb\u578b\n    x: T,\n    y: U,\n}\nimpl<T,U> Point<T,U> { // \u7ed9\u6cdb\u578bstruct\u6dfb\u52a0method\n    fn new(x: T, y: U) -> Point<T,U> {\n        Point {\n            x,\n            y\n        }\n    }\n}\nfn main() {\n  let res = add(1,2); // \u5bf9a\u8d4b\u503c\u65f6\uff0cT\u5c31\u88ab\u786e\u5b9a\u4e3a\u6574\u6570\u7c7b\u578b\n  print!("a+b={}", res);\n}\n'})}),"\n",(0,i.jsx)(e.h1,{id:"\u6027\u80fd",children:"\u6027\u80fd"}),"\n",(0,i.jsx)(e.p,{children:"Rust \u662f\u5728\u7f16\u8bd1\u671f\u4e3a\u6cdb\u578b\u5bf9\u5e94\u7684\u591a\u4e2a\u7c7b\u578b\uff0c\u751f\u6210\u5404\u81ea\u7684\u4ee3\u7801\uff0c(\u76f8\u5f53\u4e8e\u7f16\u8bd1\u5668\u5e2e\u4f60\u5199\u4e86\u591a\u4efd\u4ee3\u7801)\uff0c\u56e0\u6b64\u635f\u5931\u4e86\u7f16\u8bd1\u901f\u5ea6\u548c\u589e\u5927\u4e86\u6700\u7ec8\u751f\u6210\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u4f46\u662f\u5bf9\u6027\u80fd\u4e0d\u5f71\u54cd\u3002"}),"\n",(0,i.jsx)(e.h2,{id:"\u51fd\u6570",children:"\u51fd\u6570"}),"\n",(0,i.jsxs)(e.p,{children:["\u76f8\u540c\u7684\u89c4\u5219\u96c6\u53ef\u4ee5\u5e94\u7528\u4e8e\u51fd\u6570\uff1a\u7c7b\u578b T \u5f53\u524d\u9762\u6709 ",(0,i.jsx)(e.code,{children:"<T>"}),"\u65f6\u53d8\u5f97\u901a\u7528\u3002"]}),"\n",(0,i.jsx)(e.p,{children:"\u4f7f\u7528\u6cdb\u578b\u51fd\u6570\u6709\u65f6\u9700\u8981\u663e\u5f0f\u6307\u5b9a\u7c7b\u578b\u53c2\u6570\u3002\u5982\u679c\u5728\u8fd4\u56de\u7c7b\u578b\u4e3a\u6cdb\u578b\u7684\u60c5\u51b5\u4e0b\u8c03\u7528\u51fd\u6570\uff0c\u6216\u8005\u7f16\u8bd1\u5668\u6ca1\u6709\u8db3\u591f\u7684\u4fe1\u606f\u6765\u63a8\u65ad\u5fc5\u8981\u7684\u7c7b\u578b\u53c2\u6570\uff0c\u5219\u53ef\u80fd\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u3002"}),"\n",(0,i.jsxs)(e.p,{children:["\u5177\u6709\u663e\u5f0f\u6307\u5b9a\u7c7b\u578b\u53c2\u6570\u7684\u51fd\u6570\u8c03\u7528\u5982\u4e0b\u6240\u793a\uff1a ",(0,i.jsx)(e.code,{children:"fun::<A, B, ...>()"})," \u3002"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:"struct A;          // Concrete type `A`.\nstruct S(A);       // Concrete type `S`.\nstruct SGen<T>(T); // Generic type `SGen`.\n\n// The following functions all take ownership of the variable passed into\n// them and immediately go out of scope, freeing the variable.\n\n// Define a function `reg_fn` that takes an argument `_s` of type `S`.\n// This has no `<T>` so this is not a generic function.\nfn reg_fn(_s: S) {}\n\n// Define a function `gen_spec_t` that takes an argument `_s` of type `SGen<T>`.\n// It has been explicitly given the type parameter `A`, but because `A` has not\n// been specified as a generic type parameter for `gen_spec_t`, it is not generic.\nfn gen_spec_t(_s: SGen<A>) {}\n\n// Define a function `gen_spec_i32` that takes an argument `_s` of type `SGen<i32>`.\n// It has been explicitly given the type parameter `i32`, which is a specific type.\n// Because `i32` is not a generic type, this function is also not generic.\nfn gen_spec_i32(_s: SGen<i32>) {}\n\n// Define a function `generic` that takes an argument `_s` of type `SGen<T>`.\n// Because `SGen<T>` is preceded by `<T>`, this function is generic over `T`.\nfn generic<T>(_s: SGen<T>) {}\n\nfn main() {\n    // Using the non-generic functions\n    reg_fn(S(A));          // Concrete type.\n    gen_spec_t(SGen(A));   // Implicitly specified type parameter `A`.\n    gen_spec_i32(SGen(6)); // Implicitly specified type parameter `i32`.\n\n    // Explicitly specified type parameter `char` to `generic()`.\n    generic::<char>(SGen('a'));\n\n    // Implicitly specified type parameter `char` to `generic()`.\n    generic(SGen('c'));\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"implementation",children:"implementation"}),"\n",(0,i.jsx)(e.p,{children:"\u4e0e\u51fd\u6570\u7c7b\u4f3c\uff0c\u5b9e\u73b0\u9700\u8981\u6ce8\u610f\u4fdd\u6301\u901a\u7528\u6027\u3002"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:"struct S; // Concrete type `S`\nstruct GenericVal<T>(T); // Generic type `GenericVal`\n\n// impl of GenericVal where we explicitly specify type parameters:\nimpl GenericVal<f32> {} // Specify `f32`\nimpl GenericVal<S> {} // Specify `S` as defined above\n\n// `<T>` Must precede the type to remain generic\nimpl<T> GenericVal<T> {}\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:'struct Val {\n    val: f64,\n}\n\nstruct GenVal<T> {\n    gen_val: T,\n}\n\n// impl of Val\nimpl Val {\n    fn value(&self) -> &f64 {\n        &self.val\n    }\n}\n\n// impl of GenVal for a generic type `T`\nimpl<T> GenVal<T> {\n    fn value(&self) -> &T {\n        &self.gen_val\n    }\n}\n\nfn main() {\n    let x = Val { val: 3.0 };\n    let y = GenVal { gen_val: 3i32 };\n\n    println!("{}, {}", x.value(), y.value());\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"trait",children:"trait"}),"\n",(0,i.jsx)(e.p,{children:"\u5f53\u7136 trait \u4e5f\u53ef\u4ee5\u662f\u901a\u7528\u7684\u3002\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u5c06 Drop trait \u91cd\u65b0\u5b9e\u73b0\u4e3a drop \u672c\u8eab\u548c\u8f93\u5165\u7684\u901a\u7528\u65b9\u6cd5\u3002"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:"// Non-copyable types.\nstruct Empty;\nstruct Null;\n\n// A trait generic over `T`.\ntrait DoubleDrop<T> {\n    // Define a method on the caller type which takes an\n    // additional single parameter `T` and does nothing with it.\n    fn double_drop(self, _: T);\n}\n\n// Implement `DoubleDrop<T>` for any generic parameter `T` and\n// caller `U`.\nimpl<T, U> DoubleDrop<T> for U {\n    // This method takes ownership of both passed arguments,\n    // deallocating both.\n    fn double_drop(self, _: T) {}\n}\n\nfn main() {\n    let empty = Empty;\n    let null  = Null;\n\n    // Deallocate `empty` and `null`.\n    empty.double_drop(null);\n\n    //empty;\n    //null;\n    // ^ TODO: Try uncommenting these lines.\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"bounds",children:"bounds"}),"\n",(0,i.jsx)(e.p,{children:"\u4f7f\u7528\u6cdb\u578b\u65f6\uff0c\u7c7b\u578b\u53c2\u6570\u901a\u5e38\u5fc5\u987b\u4f7f\u7528\u7279\u5f81\u4f5c\u4e3a\u8fb9\u754c\u6765\u89c4\u5b9a\u7c7b\u578b\u5b9e\u73b0\u7684\u529f\u80fd\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u793a\u4f8b\u4f7f\u7528\u7279\u5f81 Display \u8fdb\u884c\u6253\u5370\uff0c\u56e0\u6b64\u5b83\u9700\u8981 T \u4e0e Display \u7ed1\u5b9a\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c T \u5fc5\u987b\u5b9e\u73b0 Display \u3002"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:'// Define a function `printer` that takes a generic type `T` which\n// must implement trait `Display`.\nfn printer<T: Display>(t: T) {\n    println!("{}", t);\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"\u8fb9\u754c\u5c06\u6cdb\u578b\u9650\u5236\u4e3a\u7b26\u5408\u8fb9\u754c\u7684\u7c7b\u578b\u3002\u90a3\u662f\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:"struct S<T: Display>(T);\n\n// Error! `Vec<T>` does not implement `Display`. This\n// specialization will fail.\nlet s = S(vec![1]);\n"})}),"\n",(0,i.jsx)(e.p,{children:"\u8fb9\u754c\u7684\u53e6\u4e00\u4e2a\u4f5c\u7528\u662f\u5141\u8bb8\u6cdb\u578b\u5b9e\u4f8b\u8bbf\u95ee\u8fb9\u754c\u4e2d\u6307\u5b9a\u7684\u7279\u5f81\u7684\u65b9\u6cd5\u3002\u4f8b\u5982\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:'// A trait which implements the print marker: `{:?}`.\nuse std::fmt::Debug;\n\ntrait HasArea {\n    fn area(&self) -> f64;\n}\n\nimpl HasArea for Rectangle {\n    fn area(&self) -> f64 { self.length * self.height }\n}\n\n#[derive(Debug)]\nstruct Rectangle { length: f64, height: f64 }\n#[allow(dead_code)]\nstruct Triangle  { length: f64, height: f64 }\n\n// The generic `T` must implement `Debug`. Regardless\n// of the type, this will work properly.\nfn print_debug<T: Debug>(t: &T) {\n    println!("{:?}", t);\n}\n\n// `T` must implement `HasArea`. Any type which meets\n// the bound can access `HasArea`\'s function `area`.\nfn area<T: HasArea>(t: &T) -> f64 { t.area() }\n\nfn main() {\n    let rectangle = Rectangle { length: 3.0, height: 4.0 };\n    let _triangle = Triangle  { length: 3.0, height: 4.0 };\n\n    print_debug(&rectangle);\n    println!("Area: {}", area(&rectangle));\n\n    //print_debug(&_triangle);\n    //println!("Area: {}", area(&_triangle));\n    // ^ TODO: Try uncommenting these.\n    // | Error: Does not implement either `Debug` or `HasArea`. \n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"\u4f5c\u4e3a\u8865\u5145\u8bf4\u660e\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c where \u5b50\u53e5\u4e5f\u53ef\u7528\u4e8e\u5e94\u7528\u8fb9\u754c\uff0c\u4ee5\u66f4\u5177\u8868\u73b0\u529b\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u8fb9\u754c\u5de5\u4f5c\u65b9\u5f0f\u7684\u7ed3\u679c\u662f\uff0c\u5373\u4f7f trait \u4e0d\u5305\u542b\u4efb\u4f55\u529f\u80fd\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u5c06\u5176\u7528\u4f5c\u8fb9\u754c\u3002 Eq \u548c Copy \u662f std \u5e93\u4e2d\u6b64\u7c7b trait \u7684\u793a\u4f8b\u3002"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:'struct Cardinal;\nstruct BlueJay;\nstruct Turkey;\n\ntrait Red {}\ntrait Blue {}\n\nimpl Red for Cardinal {}\nimpl Blue for BlueJay {}\n\n// These functions are only valid for types which implement these\n// traits. The fact that the traits are empty is irrelevant.\nfn red<T: Red>(_: &T)   -> &\'static str { "red" }\nfn blue<T: Blue>(_: &T) -> &\'static str { "blue" }\n\nfn main() {\n    let cardinal = Cardinal;\n    let blue_jay = BlueJay;\n    let _turkey   = Turkey;\n\n    // `red()` won\'t work on a blue jay nor vice versa\n    // because of the bounds.\n    println!("A cardinal is {}", red(&cardinal));\n    println!("A blue jay is {}", blue(&blue_jay));\n    //println!("A turkey is {}", red(&_turkey));\n    // ^ TODO: Try uncommenting this line.\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"multibounds",children:"MultiBounds"}),"\n",(0,i.jsx)(e.p,{children:"\u8fb9\u754c\u5de5\u4f5c\u65b9\u5f0f\u7684\u7ed3\u679c\u662f\uff0c\u5373\u4f7f trait \u4e0d\u5305\u542b\u4efb\u4f55\u529f\u80fd\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u5c06\u5176\u7528\u4f5c\u8fb9\u754c\u3002 Eq \u548c Copy \u662f std \u5e93\u4e2d\u6b64\u7c7b trait \u7684\u793a\u4f8b\u3002"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:'use std::fmt::{Debug, Display};\n\nfn compare_prints<T: Debug + Display>(t: &T) {\n    println!("Debug: `{:?}`", t);\n    println!("Display: `{}`", t);\n}\n\nfn compare_types<T: Debug, U: Debug>(t: &T, u: &U) {\n    println!("t: `{:?}`", t);\n    println!("u: `{:?}`", u);\n}\n\nfn main() {\n    let string = "words";\n    let array = [1, 2, 3];\n    let vec = vec![1, 2, 3];\n\n    compare_prints(&string);\n    //compare_prints(&array);\n    // TODO ^ Try uncommenting this.\n\n    compare_types(&array, &vec);\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"where\u5b50\u53e5",children:"where\u5b50\u53e5"}),"\n",(0,i.jsxs)(e.p,{children:["\u8fb9\u754c\u4e5f\u53ef\u4ee5\u5728\u5f00\u59cb ",(0,i.jsx)(e.code,{children:"{"})," \u4e4b\u524d\u4f7f\u7528 where \u5b50\u53e5\u6765\u8868\u8fbe\uff0c\u800c\u4e0d\u662f\u5728\u7c7b\u578b\u7b2c\u4e00\u6b21\u63d0\u53ca\u65f6\u3002\u6b64\u5916\uff0c where \u5b50\u53e5\u53ef\u4ee5\u5c06\u8fb9\u754c\u5e94\u7528\u4e8e\u4efb\u610f\u7c7b\u578b\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u7c7b\u578b\u53c2\u6570\u3002"]}),"\n",(0,i.jsx)(e.p,{children:"\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b where \u5b50\u53e5\u5f88\u6709\u7528\uff1a"}),"\n",(0,i.jsx)(e.p,{children:"\u5f53\u5355\u72ec\u6307\u5b9a\u6cdb\u578b\u7c7b\u578b\u548c\u754c\u9650\u65f6\u4f1a\u66f4\u6e05\u6670\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:"impl <A: TraitB + TraitC, D: TraitE + TraitF> MyTrait<A, D> for YourType {}\n\n// Expressing bounds with a `where` clause\nimpl <A, D> MyTrait<A, D> for YourType where\n    A: TraitB + TraitC,\n    D: TraitE + TraitF {}\n"})}),"\n",(0,i.jsx)(e.p,{children:"\u4f7f\u7528 where \u5b50\u53e5\u6bd4\u4f7f\u7528\u666e\u901a\u8bed\u6cd5\u66f4\u5177\u8868\u73b0\u529b\u3002\u6b64\u793a\u4f8b\u4e2d\u7684 impl \u4e0d\u80fd\u5728\u6ca1\u6709 where \u5b50\u53e5\u7684\u60c5\u51b5\u4e0b\u76f4\u63a5\u8868\u8fbe\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:'use std::fmt::Debug;\n\ntrait PrintInOption {\n    fn print_in_option(self);\n}\n\n// Because we would otherwise have to express this as `T: Debug` or \n// use another method of indirect approach, this requires a `where` clause:\nimpl<T> PrintInOption for T where\n    Option<T>: Debug {\n    // We want `Option<T>: Debug` as our bound because that is what\'s\n    // being printed. Doing otherwise would be using the wrong bound.\n    fn print_in_option(self) {\n        println!("{:?}", Some(self));\n    }\n}\n\nfn main() {\n    let vec = vec![1, 2, 3];\n\n    vec.print_in_option();\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"new-type-idiom",children:"New type idiom"}),"\n",(0,i.jsx)(e.p,{children:"newtype \u4e60\u60ef\u7528\u6cd5\u5728\u7f16\u8bd1\u65f6\u4fdd\u8bc1\u5411\u7a0b\u5e8f\u63d0\u4f9b\u6b63\u786e\u7c7b\u578b\u7684\u503c\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u4f8b\u5982\uff0c\u68c0\u67e5\u5e74\u9f84\u7684\u5e74\u9f84\u9a8c\u8bc1\u51fd\u6570\u5fc5\u987b\u6307\u5b9a Years \u7c7b\u578b\u7684\u503c\u3002"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:'struct Years(i64);\n\nstruct Days(i64);\n\nimpl Years {\n    pub fn to_days(&self) -> Days {\n        Days(self.0 * 365)\n    }\n}\n\n\nimpl Days {\n    /// truncates partial years\n    pub fn to_years(&self) -> Years {\n        Years(self.0 / 365)\n    }\n}\n\nfn old_enough(age: &Years) -> bool {\n    age.0 >= 18\n}\n\nfn main() {\n    let age = Years(5);\n    let age_days = age.to_days();\n    println!("Old enough {}", old_enough(&age));\n    println!("Old enough {}", old_enough(&age_days.to_years()));\n    // println!("Old enough {}", old_enough(&age_days));\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"\u53d6\u6d88\u6ce8\u91ca\u6700\u540e\u4e00\u4e2a\u6253\u5370\u8bed\u53e5\u4ee5\u89c2\u5bdf\u63d0\u4f9b\u7684\u7c7b\u578b\u5fc5\u987b\u662f Years \u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u8981\u83b7\u53d6 newtype \u7684\u503c\u4f5c\u4e3a\u57fa\u672c\u7c7b\u578b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5143\u7ec4\u6216\u89e3\u6784\u8bed\u6cd5\uff0c\u5982\u4e0b\u6240\u793a\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:"struct Years(i64);\n\nfn main() {\n    let years = Years(42);\n    let years_as_primitive_1: i64 = years.0; // Tuple\n    let Years(years_as_primitive_2) = years; // Destructuring\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"associated-items",children:"Associated items"}),"\n",(0,i.jsx)(e.p,{children:"\u201c\u5173\u8054\u9879\u201d\u662f\u6307\u4e0e\u5404\u79cd\u7c7b\u578b\u7684 item \u6709\u5173\u7684\u4e00\u7ec4\u89c4\u5219\u3002\u5b83\u662f trait \u6cdb\u578b\u7684\u6269\u5c55\uff0c\u5e76\u5141\u8bb8 trait \u5728\u5185\u90e8\u5b9a\u4e49\u65b0\u9879\u76ee\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u5176\u4e2d\u4e00\u9879\u79f0\u4e3a\u5173\u8054\u7c7b\u578b\uff0c\u5f53 trait \u5bf9\u5176\u5bb9\u5668\u7c7b\u578b\u901a\u7528\u65f6\uff0c\u5b83\u63d0\u4f9b\u66f4\u7b80\u5355\u7684\u4f7f\u7528\u6a21\u5f0f\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u5bf9\u5176\u5bb9\u5668\u7c7b\u578b\u901a\u7528\u7684 trait \u5177\u6709\u7c7b\u578b\u89c4\u8303\u8981\u6c42 - trait \u7684\u7528\u6237\u5fc5\u987b\u6307\u5b9a\u5176\u6240\u6709\u901a\u7528\u7c7b\u578b\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c Contains trait \u5141\u8bb8\u4f7f\u7528\u6cdb\u578b\u7c7b\u578b A \u548c B \u3002\u7136\u540e\u4e3a Container \u7c7b\u578b\u5b9e\u73b0\u8be5\u7279\u5f81\uff0c\u4e3a A \u548c B \u6307\u5b9a i32 \uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u4e0e fn difference() \u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u7531\u4e8e Contains \u662f\u901a\u7528\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u88ab\u8feb\u663e\u5f0f\u58f0\u660e fn difference() \u7684\u6240\u6709\u901a\u7528\u7c7b\u578b\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u6211\u4eec\u60f3\u8981\u4e00\u79cd\u65b9\u5f0f\u6765\u8868\u8fbe A \u548c B \u7531\u8f93\u5165 C \u786e\u5b9a\u3002\u6b63\u5982\u60a8\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u770b\u5230\u7684\uff0c\u5173\u8054\u7c7b\u578b\u6070\u6070\u63d0\u4f9b\u4e86\u8be5\u529f\u80fd\u3002"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:'struct Container(i32, i32);\n\n// A trait which checks if 2 items are stored inside of container.\n// Also retrieves first or last value.\ntrait Contains<A, B> {\n    fn contains(&self, _: &A, _: &B) -> bool; // Explicitly requires `A` and `B`.\n    fn first(&self) -> i32; // Doesn\'t explicitly require `A` or `B`.\n    fn last(&self) -> i32;  // Doesn\'t explicitly require `A` or `B`.\n}\n\nimpl Contains<i32, i32> for Container {\n    // True if the numbers stored are equal.\n    fn contains(&self, number_1: &i32, number_2: &i32) -> bool {\n        (&self.0 == number_1) && (&self.1 == number_2)\n    }\n\n    // Grab the first number.\n    fn first(&self) -> i32 { self.0 }\n\n    // Grab the last number.\n    fn last(&self) -> i32 { self.1 }\n}\n\n// `C` contains `A` and `B`. In light of that, having to express `A` and\n// `B` again is a nuisance.\nfn difference<A, B, C>(container: &C) -> i32 where\n    C: Contains<A, B> {\n    container.last() - container.first()\n}\n\nfn main() {\n    let number_1 = 3;\n    let number_2 = 10;\n\n    let container = Container(number_1, number_2);\n\n    println!("Does container contain {} and {}: {}",\n        &number_1, &number_2,\n        container.contains(&number_1, &number_2));\n    println!("First number: {}", container.first());\n    println!("Last number: {}", container.last());\n\n    println!("The difference is: {}", difference(&container));\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"\u5173\u8054\u7c7b\u578b",children:"\u5173\u8054\u7c7b\u578b"}),"\n",(0,i.jsx)(e.p,{children:"\u201c\u5173\u8054\u7c7b\u578b\u201d\u7684\u4f7f\u7528\u901a\u8fc7\u5c06\u5185\u90e8\u7c7b\u578b\u672c\u5730\u79fb\u52a8\u5230\u7279\u5f81\u4e2d\u4f5c\u4e3a\u8f93\u51fa\u7c7b\u578b\u6765\u63d0\u9ad8\u4ee3\u7801\u7684\u6574\u4f53\u53ef\u8bfb\u6027\u3002 trait \u5b9a\u4e49\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:"// `A` and `B` are defined in the trait via the `type` keyword.\n// (Note: `type` in this context is different from `type` when used for\n// aliases).\ntrait Contains {\n    type A;\n    type B;\n\n    // Updated syntax to refer to these new types generically.\n    fn contains(&self, _: &Self::A, _: &Self::B) -> bool;\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"\u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528 trait Contains \u7684\u51fd\u6570\u4e0d\u518d\u9700\u8981\u8868\u8fbe A \u6216 B \uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:"// Without using associated types\nfn difference<A, B, C>(container: &C) -> i32 where\n    C: Contains<A, B> { ... }\n\n// Using associated types\nfn difference<C: Contains>(container: &C) -> i32 { ... }\n"})}),"\n",(0,i.jsx)(e.p,{children:"\u8ba9\u6211\u4eec\u4f7f\u7528\u5173\u8054\u7c7b\u578b\u91cd\u5199\u4e0a\u4e00\u8282\u4e2d\u7684\u793a\u4f8b\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:'struct Container(i32, i32);\n\n// A trait which checks if 2 items are stored inside of container.\n// Also retrieves first or last value.\ntrait Contains {\n    // Define generic types here which methods will be able to utilize.\n    type A;\n    type B;\n\n    fn contains(&self, _: &Self::A, _: &Self::B) -> bool;\n    fn first(&self) -> i32;\n    fn last(&self) -> i32;\n}\n\nimpl Contains for Container {\n    // Specify what types `A` and `B` are. If the `input` type\n    // is `Container(i32, i32)`, the `output` types are determined\n    // as `i32` and `i32`.\n    type A = i32;\n    type B = i32;\n\n    // `&Self::A` and `&Self::B` are also valid here.\n    fn contains(&self, number_1: &i32, number_2: &i32) -> bool {\n        (&self.0 == number_1) && (&self.1 == number_2)\n    }\n    // Grab the first number.\n    fn first(&self) -> i32 { self.0 }\n\n    // Grab the last number.\n    fn last(&self) -> i32 { self.1 }\n}\n\nfn difference<C: Contains>(container: &C) -> i32 {\n    container.last() - container.first()\n}\n\nfn main() {\n    let number_1 = 3;\n    let number_2 = 10;\n\n    let container = Container(number_1, number_2);\n\n    println!("Does container contain {} and {}: {}",\n        &number_1, &number_2,\n        container.contains(&number_1, &number_2));\n    println!("First number: {}", container.first());\n    println!("Last number: {}", container.last());\n    \n    println!("The difference is: {}", difference(&container));\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"\u5e7b\u60f3\u7c7b\u578b\u53c2\u6570",children:"\u5e7b\u60f3\u7c7b\u578b\u53c2\u6570"}),"\n",(0,i.jsx)(e.p,{children:"\u5e7b\u50cf\u7c7b\u578b\u53c2\u6570\u662f\u4e00\u79cd\u5728\u8fd0\u884c\u65f6\u4e0d\u663e\u793a\u7684\u53c2\u6570\uff0c\u4f46\u5728\u7f16\u8bd1\u65f6\uff08\u4e14\u4ec5\uff09\u9759\u6001\u68c0\u67e5\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u4f7f\u7528\u989d\u5916\u7684\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u6765\u5145\u5f53\u6807\u8bb0\u6216\u5728\u7f16\u8bd1\u65f6\u6267\u884c\u7c7b\u578b\u68c0\u67e5\u3002\u8fd9\u4e9b\u989d\u5916\u53c2\u6570\u4e0d\u4fdd\u5b58\u5b58\u50a8\u503c\uff0c\u5e76\u4e14\u6ca1\u6709\u8fd0\u884c\u65f6\u884c\u4e3a\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06 std::marker::PhantomData \u4e0e\u5e7b\u50cf\u7c7b\u578b\u53c2\u6570\u6982\u5ff5\u7ed3\u5408\u8d77\u6765\uff0c\u521b\u5efa\u5305\u542b\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u5143\u7ec4\u3002"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:"use std::marker::PhantomData;\n\n// A phantom tuple struct which is generic over `A` with hidden parameter `B`.\n#[derive(PartialEq)] // Allow equality test for this type.\nstruct PhantomTuple<A, B>(A, PhantomData<B>);\n\n// A phantom type struct which is generic over `A` with hidden parameter `B`.\n#[derive(PartialEq)] // Allow equality test for this type.\nstruct PhantomStruct<A, B> { first: A, phantom: PhantomData<B> }\n\n// Note: Storage is allocated for generic type `A`, but not for `B`.\n//       Therefore, `B` cannot be used in computations.\n\nfn main() {\n    // Here, `f32` and `f64` are the hidden parameters.\n    // PhantomTuple type specified as `<char, f32>`.\n    let _tuple1: PhantomTuple<char, f32> = PhantomTuple('Q', PhantomData);\n    // PhantomTuple type specified as `<char, f64>`.\n    let _tuple2: PhantomTuple<char, f64> = PhantomTuple('Q', PhantomData);\n\n    // Type specified as `<char, f32>`.\n    let _struct1: PhantomStruct<char, f32> = PhantomStruct {\n        first: 'Q',\n        phantom: PhantomData,\n    };\n    // Type specified as `<char, f64>`.\n    let _struct2: PhantomStruct<char, f64> = PhantomStruct {\n        first: 'Q',\n        phantom: PhantomData,\n    };\n\n    // Compile-time Error! Type mismatch so these cannot be compared:\n    // println!(\"_tuple1 == _tuple2 yields: {}\",\n    //           _tuple1 == _tuple2);\n\n    // Compile-time Error! Type mismatch so these cannot be compared:\n    // println!(\"_struct1 == _struct2 yields: {}\",\n    //           _struct1 == _struct2);\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u5e7b\u50cf\u7c7b\u578b\u53c2\u6570\u5b9e\u73b0 Add \u6765\u68c0\u67e5\u6709\u7528\u7684\u5355\u4f4d\u8f6c\u6362\u65b9\u6cd5\u3002\u4e0b\u9762\u68c0\u67e5 Add trait \uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:"// This construction would impose: `Self + RHS = Output`\n// where RHS defaults to Self if not specified in the implementation.\npub trait Add<RHS = Self> {\n    type Output;\n\n    fn add(self, rhs: RHS) -> Self::Output;\n}\n\n// `Output` must be `T<U>` so that `T<U> + T<U> = T<U>`.\nimpl<U> Add for T<U> {\n    type Output = T<U>;\n    ...\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"\u6574\u4e2a\u5b9e\u73b0"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:'use std::ops::Add;\nuse std::marker::PhantomData;\n\n/// Create void enumerations to define unit types.\n#[derive(Debug, Clone, Copy)]\nenum Inch {}\n#[derive(Debug, Clone, Copy)]\nenum Mm {}\n\n/// `Length` is a type with phantom type parameter `Unit`,\n/// and is not generic over the length type (that is `f64`).\n///\n/// `f64` already implements the `Clone` and `Copy` traits.\n#[derive(Debug, Clone, Copy)]\nstruct Length<Unit>(f64, PhantomData<Unit>);\n\n/// The `Add` trait defines the behavior of the `+` operator.\nimpl<Unit> Add for Length<Unit> {\n    type Output = Length<Unit>;\n\n    // add() returns a new `Length` struct containing the sum.\n    fn add(self, rhs: Length<Unit>) -> Length<Unit> {\n        // `+` calls the `Add` implementation for `f64`.\n        Length(self.0 + rhs.0, PhantomData)\n    }\n}\n\nfn main() {\n    // Specifies `one_foot` to have phantom type parameter `Inch`.\n    let one_foot:  Length<Inch> = Length(12.0, PhantomData);\n    // `one_meter` has phantom type parameter `Mm`.\n    let one_meter: Length<Mm>   = Length(1000.0, PhantomData);\n\n    // `+` calls the `add()` method we implemented for `Length<Unit>`.\n    //\n    // Since `Length` implements `Copy`, `add()` does not consume\n    // `one_foot` and `one_meter` but copies them into `self` and `rhs`.\n    let two_feet = one_foot + one_foot;\n    let two_meters = one_meter + one_meter;\n\n    // Addition works.\n    println!("one foot + one_foot = {:?} in", two_feet.0);\n    println!("one meter + one_meter = {:?} mm", two_meters.0);\n\n    // Nonsensical operations fail as they should:\n    // Compile-time Error: type mismatch.\n    //let one_feter = one_foot + one_meter;\n}\n'})})]})}function d(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(p,{...n})}):p(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>l});var i=t(6540);const r={},a=i.createContext(r);function s(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);