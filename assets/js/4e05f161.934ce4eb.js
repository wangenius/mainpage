"use strict";(self.webpackChunkpanovista=self.webpackChunkpanovista||[]).push([[1999],{90474:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>l});var s=n(74848),i=n(28453);const r={title:"Sets",sidebar_position:8,slug:"Sets"},a="Sets",d={id:"lang/python/\u6570\u636e\u7c7b\u578b/Sets",title:"Sets",description:"Sets are used to store multiple items in a single variable.",source:"@site/docs/lang/python/\u6570\u636e\u7c7b\u578b/Sets.mdx",sourceDirName:"lang/python/\u6570\u636e\u7c7b\u578b",slug:"/lang/python/\u6570\u636e\u7c7b\u578b/Sets",permalink:"/docs/lang/python/\u6570\u636e\u7c7b\u578b/Sets",draft:!1,unlisted:!1,editUrl:"https://github.com/wangenius/wangenius.github.io/tree/master/docs/lang/python/\u6570\u636e\u7c7b\u578b/Sets.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"Sets",sidebar_position:8,slug:"Sets"},sidebar:"python",previous:{title:"list",permalink:"/docs/lang/python/\u6570\u636e\u7c7b\u578b/list"},next:{title:"tuple",permalink:"/docs/lang/python/\u6570\u636e\u7c7b\u578b/tuple"}},o={},l=[{value:"constructor",id:"constructor",level:2},{value:"function",id:"function",level:2},{value:"access",id:"access",level:3},{value:"add",id:"add",level:3},{value:"remove",id:"remove",level:3},{value:"loop",id:"loop",level:3},{value:"join",id:"join",level:3}];function c(e){const t={admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"sets",children:"Sets"}),"\n",(0,s.jsx)(t.p,{children:"Sets are used to store multiple items in a single variable."}),"\n",(0,s.jsx)(t.p,{children:"Set is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary, all with different qualities and usage."}),"\n",(0,s.jsx)(t.p,{children:"A set is a collection which is unordered, unchangeable*, and unindexed."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'myset = {"apple", "banana", "cherry"}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Sets are written with curly brackets."}),"\n",(0,s.jsx)(t.p,{children:"Unordered means that the items in a set do not have a defined order."}),"\n",(0,s.jsx)(t.p,{children:"Set items can appear in a different order every time you use them, and cannot be referred to by index or key."}),"\n",(0,s.jsx)(t.p,{children:"Set items are unchangeable, meaning that we cannot change the items after the set has been created."}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"Once a set is created, you cannot change its items, but you can remove items and add new items."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Sets cannot have two items with the same value."}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"Note: The values True and 1 are considered the same value in sets, and are treated as duplicates:"}),"\n"]}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(t.p,{children:"The values False and 0 are considered the same value in sets, and are treated as\nduplicates:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'thisset = {"apple", "banana", "cherry"}\nset1 = {"abc", 34, True, 40, "male"}\nprint(len(thisset))\nprint(type(set1))\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",metastring:'title="output"',children:"3\n<class 'set'>\n"})}),"\n",(0,s.jsx)(t.h2,{id:"constructor",children:"constructor"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'thisset = set(("apple", "banana", "cherry")) # note the double round-brackets\nprint(thisset)\n'})}),"\n",(0,s.jsx)(t.h2,{id:"function",children:"function"}),"\n",(0,s.jsx)(t.h3,{id:"access",children:"access"}),"\n",(0,s.jsx)(t.p,{children:"You cannot access items in a set by referring to an index or a key."}),"\n",(0,s.jsx)(t.p,{children:"But you can loop through the set items using a for loop, or ask if a specified value is present in a set, by using the in keyword."}),"\n",(0,s.jsx)(t.h3,{id:"add",children:"add"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'thisset = {"apple", "banana", "cherry"}\nthisset.add("orange")\nprint(thisset)\n\ntropical = {"pineapple", "mango", "papaya"}\nthisset.update(tropical)\nprint(thisset)\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",metastring:'title="output"',children:'{"apple","banana","cherry","orange"}\n{"apple","banana","cherry","orange","pineapple","mango","papaya"}\n'})}),"\n",(0,s.jsx)(t.p,{children:"The object in the update() method does not have to be a set, it can be any iterable object (tuples, lists, dictionaries etc.)."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'thisset = {"apple", "banana", "cherry"}\nmylist = ["kiwi", "orange"]\n\nthisset.update(mylist)\nprint(thisset)\n'})}),"\n",(0,s.jsx)(t.h3,{id:"remove",children:"remove"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'thisset = {"apple", "banana", "cherry"}\nthisset.remove("banana")\nprint(thisset)\n\nthisset.discard("banana")\n'})}),"\n",(0,s.jsxs)(t.admonition,{title:"Note",type:"success",children:[(0,s.jsx)(t.p,{children:"If the item to remove does not exist, remove() will raise an error."}),(0,s.jsx)(t.p,{children:"If the item to remove does not exist, discard() will NOT raise an error."})]}),"\n",(0,s.jsx)(t.p,{children:"You can also use the pop() method to remove an item, but this method will remove a random item, so you cannot be sure what item that gets removed."}),"\n",(0,s.jsx)(t.p,{children:"The return value of the pop() method is the removed item."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'thisset = {"apple", "banana", "cherry"}\nx = thisset.pop()\nprint(x)\nprint(thisset)\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'thisset = {"apple", "banana", "cherry"}\nthisset.clear()\nprint(thisset)\ndel thisset\nprint(thisset)\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",metastring:'title="output"',children:"set()\nNameError: name 'thisset' is not defined\n"})}),"\n",(0,s.jsx)(t.h3,{id:"loop",children:"loop"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'thisset = {"apple", "banana", "cherry"}\nfor x in thisset:\n  print(x)\n'})}),"\n",(0,s.jsx)(t.h3,{id:"join",children:"join"}),"\n",(0,s.jsx)(t.p,{children:"There are several ways to join two or more sets in Python."}),"\n",(0,s.jsx)(t.p,{children:"You can use the union() method that returns a new set containing all items from both sets, or the update() method that inserts all the items from one set into another:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'set1 = {"a", "b" , "c"}\nset2 = {1, 2, 3}\n\nset3 = set1.union(set2)\nprint(set3)\n\nset1.update(set2)\nprint(set1)\n'})}),"\n",(0,s.jsx)(t.admonition,{title:"\u6ce8\u610f",type:"success",children:(0,s.jsx)(t.p,{children:"Note: Both union() and update() will exclude any duplicate items."})}),"\n",(0,s.jsx)(t.p,{children:"The intersection_update() method will keep only the items that are present in both sets."}),"\n",(0,s.jsx)(t.p,{children:"The intersection() method will return a new set, that only contains the items that are present in both sets."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'x = {"apple", "banana", "cherry"}\ny = {"google", "microsoft", "apple"}\n\nz = x.intersection(y)\nprint(z)\n\nx.intersection_update(y)\nprint(x)\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",metastring:'title="output"',children:'{"apple"}\n{"apple"}\n'})}),"\n",(0,s.jsx)(t.p,{children:"The symmetric_difference_update() method will keep only the elements that are NOT present in both sets."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'x = {"apple", "banana", "cherry"}\ny = {"google", "microsoft", "apple"}\n\nz = x.symmetric_difference(y)\nprint(z)\n\nx.symmetric_difference_update(y)\nprint(x)\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",metastring:'title="output"',children:"{'google', 'banana', 'microsoft', 'cherry'}\n{'google', 'banana', 'microsoft', 'cherry'}\n"})}),"\n",(0,s.jsx)(t.p,{children:"The values True and 1 are considered the same value in sets, and are treated as duplicates."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"function"}),(0,s.jsx)(t.th,{children:"description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"add()"}),(0,s.jsx)(t.td,{children:"Adds an element to the set"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"clear()"}),(0,s.jsx)(t.td,{children:"Removes all the elements from the set"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"copy()"}),(0,s.jsx)(t.td,{children:"Returns a copy of the set"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"difference()"}),(0,s.jsx)(t.td,{children:"Returns a set containing the difference between two or more sets"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"difference_update()"}),(0,s.jsx)(t.td,{children:"Removes the items in this set that are also included in another, specified set"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"discard()"}),(0,s.jsx)(t.td,{children:"Remove the specified item"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"intersection()"}),(0,s.jsx)(t.td,{children:"Returns a set, that is the intersection of two other sets"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"intersection_update()"}),(0,s.jsx)(t.td,{children:"Removes the items in this set that are not present in other, specified set(s)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"isdisjoint()"}),(0,s.jsx)(t.td,{children:"Returns whether two sets have a intersection or not"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"issubset()"}),(0,s.jsx)(t.td,{children:"Returns whether another set contains this set or not"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"issuperset()"}),(0,s.jsx)(t.td,{children:"Returns whether this set contains another set or not"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"pop()"}),(0,s.jsx)(t.td,{children:"Removes an element from the set"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"remove()"}),(0,s.jsx)(t.td,{children:"Removes the specified element"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"symmetric_difference()"}),(0,s.jsx)(t.td,{children:"Returns a set with the symmetric differences of two sets"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"symmetric_difference_update()"}),(0,s.jsx)(t.td,{children:"inserts the symmetric differences from this set and another"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"union()"}),(0,s.jsx)(t.td,{children:"Return a set containing the union of sets"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"update()"}),(0,s.jsx)(t.td,{children:"Update the set with the union of this set and others"})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>d});var s=n(96540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);