"use strict";(self.webpackChunkwangenius=self.webpackChunkwangenius||[]).push([[9371],{5136:(n,r,e)=>{e.r(r),e.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var t=e(4848),i=e(8453);const s={title:"traits",sidebar_position:1,slug:"traits"},a="traits",l={id:"lang/rust/\u7279\u5f81/traits",title:"traits",description:"trait \u662f\u4e3a\u672a\u77e5\u7c7b\u578b\u5b9a\u4e49\u7684\u65b9\u6cd5\u96c6\u5408\uff1a Self \u3002\u4ed6\u4eec\u53ef\u4ee5\u8bbf\u95ee\u540c\u4e00\u7279\u5f81\u4e2d\u58f0\u660e\u7684\u5176\u4ed6\u65b9\u6cd5\u3002",source:"@site/docs/lang/rust/\u7279\u5f81/traits.mdx",sourceDirName:"lang/rust/\u7279\u5f81",slug:"/lang/rust/\u7279\u5f81/traits",permalink:"/mainpage/docs/lang/rust/\u7279\u5f81/traits",draft:!1,unlisted:!1,editUrl:"https://github.com/wangenius/mainpage/tree/master/docs/lang/rust/\u7279\u5f81/traits.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"traits",sidebar_position:1,slug:"traits"},sidebar:"rust",previous:{title:"\u8fd0\u884c\u6d4b\u8bd5",permalink:"/mainpage/docs/lang/rust/\u6d4b\u8bd5/\u8fd0\u884c\u6d4b\u8bd5"},next:{title:"\u8fed\u4ee3\u5668",permalink:"/mainpage/docs/lang/rust/\u7279\u5f81/\u8fed\u4ee3\u5668"}},o={},d=[{value:"Trait \u7684\u5173\u8054\u7c7b\u578b",id:"trait-\u7684\u5173\u8054\u7c7b\u578b",level:2},{value:"\u5b9e\u73b0trait",id:"\u5b9e\u73b0trait",level:2},{value:"trait \u7684\u5b64\u513f\u89c4\u5219",id:"trait-\u7684\u5b64\u513f\u89c4\u5219",level:6},{value:"trait \u7684\u9ed8\u8ba4\u5b9e\u73b0",id:"trait-\u7684\u9ed8\u8ba4\u5b9e\u73b0",level:6},{value:"\u7279\u5f81\u7ea6\u675f (trait bound(\u7ed1\u5b9a))",id:"\u7279\u5f81\u7ea6\u675f-trait-bound\u7ed1\u5b9a",level:6},{value:"Trait \u5bf9\u8c61",id:"trait-\u5bf9\u8c61",level:5},{value:"Derive",id:"derive",level:2},{value:"\u4f7f\u7528dyn\u8fd4\u56de\u7279\u5f81",id:"\u4f7f\u7528dyn\u8fd4\u56de\u7279\u5f81",level:2},{value:"\u8fd0\u7b97\u7b26\u91cd\u8f7d",id:"\u8fd0\u7b97\u7b26\u91cd\u8f7d",level:2},{value:"Drop",id:"drop",level:2},{value:"super traits",id:"super-traits",level:2},{value:"\u6d88\u9664\u91cd\u53e0\u7279\u5f81\u7684\u6b67\u4e49",id:"\u6d88\u9664\u91cd\u53e0\u7279\u5f81\u7684\u6b67\u4e49",level:2}];function c(n){const r={code:"code",h1:"h1",h2:"h2",h5:"h5",h6:"h6",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"traits",children:"traits"}),"\n",(0,t.jsx)(r.p,{children:"trait \u662f\u4e3a\u672a\u77e5\u7c7b\u578b\u5b9a\u4e49\u7684\u65b9\u6cd5\u96c6\u5408\uff1a Self \u3002\u4ed6\u4eec\u53ef\u4ee5\u8bbf\u95ee\u540c\u4e00\u7279\u5f81\u4e2d\u58f0\u660e\u7684\u5176\u4ed6\u65b9\u6cd5\u3002"}),"\n",(0,t.jsx)(r.p,{children:"\u53ef\u4ee5\u4e3a\u4efb\u4f55\u6570\u636e\u7c7b\u578b\u5b9e\u73b0\u7279\u5f81\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u7ec4\u65b9\u6cd5 Animal \u3002\u7136\u540e\u4e3a Sheep \u6570\u636e\u7c7b\u578b\u5b9e\u73b0 Animal trait \uff0c\u5141\u8bb8\u4f7f\u7528 Animal \u4e2d\u7684\u65b9\u6cd5\u548c Sheep"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'struct Sheep { naked: bool, name: &\'static str }\r\n\r\ntrait Animal {\r\n    // Associated function signature; `Self` refers to the implementor type.\r\n    fn new(name: &\'static str) -> Self;\r\n\r\n    // Method signatures; these will return a string.\r\n    fn name(&self) -> &\'static str;\r\n    fn noise(&self) -> &\'static str;\r\n\r\n    // Traits can provide default method definitions.\r\n    fn talk(&self) {\r\n        println!("{} says {}", self.name(), self.noise());\r\n    }\r\n}\r\n\r\nimpl Sheep {\r\n    fn is_naked(&self) -> bool {\r\n        self.naked\r\n    }\r\n\r\n    fn shear(&mut self) {\r\n        if self.is_naked() {\r\n            // Implementor methods can use the implementor\'s trait methods.\r\n            println!("{} is already naked...", self.name());\r\n        } else {\r\n            println!("{} gets a haircut!", self.name);\r\n\r\n            self.naked = true;\r\n        }\r\n    }\r\n}\r\n\r\n// Implement the `Animal` trait for `Sheep`.\r\nimpl Animal for Sheep {\r\n    // `Self` is the implementor type: `Sheep`.\r\n    fn new(name: &\'static str) -> Sheep {\r\n        Sheep { name: name, naked: false }\r\n    }\r\n\r\n    fn name(&self) -> &\'static str {\r\n        self.name\r\n    }\r\n\r\n    fn noise(&self) -> &\'static str {\r\n        if self.is_naked() {\r\n            "baaaaah?"\r\n        } else {\r\n            "baaaaah!"\r\n        }\r\n    }\r\n    \r\n    // Default trait methods can be overridden.\r\n    fn talk(&self) {\r\n        // For example, we can add some quiet contemplation.\r\n        println!("{} pauses briefly... {}", self.name, self.noise());\r\n    }\r\n}\r\n\r\nfn main() {\r\n    // Type annotation is necessary in this case.\r\n    let mut dolly: Sheep = Animal::new("Dolly");\r\n    // TODO ^ Try removing the type annotations.\r\n\r\n    dolly.talk();\r\n    dolly.shear();\r\n    dolly.talk();\r\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["\u7c7b\u4f3c\u4e8eOOP\u7684 interface ",", \u5b9a\u4e49\u4e86\u4e00\u7ec4\u53ef\u4ee5\u88ab\u5171\u4eab\u7684\u884c\u4e3a\uff0c\u53ea\u8981\u5b9e\u73b0\u4e86\u7279\u5f81\uff0c\u4f60\u5c31\u80fd\u4f7f\u7528\u8fd9\u7ec4\u884c\u4e3a"]}),"\n",(0,t.jsx)(r.p,{children:"\u5982\u679c\u4e0d\u540c\u7684\u7c7b\u578b\u5177\u6709\u76f8\u540c\u7684\u884c\u4e3a\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u7279\u5f81\uff0c\u7136\u540e\u4e3a\u8fd9\u4e9b\u7c7b\u578b\u5b9e\u73b0\u8be5\u7279\u5f81\u3002"}),"\n",(0,t.jsx)(r.p,{children:"\u5b9a\u4e49 Trait"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-Rust",children:"pub trait Person{\r\n  fn say(&self) -> String;\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"trait-\u7684\u5173\u8054\u7c7b\u578b",children:"Trait \u7684\u5173\u8054\u7c7b\u578b"}),"\n",(0,t.jsx)(r.p,{children:"trait \u9664\u4e86\u53ef\u4ee5\u5b9a\u4e49\u65b9\u6cd5\uff0c\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u7c7b\u578b\uff0c\u5b9e\u73b0 Trait \u7279\u5f81\u65f6\uff0c\u4e5f\u9700\u8981\u5b9e\u73b0\u5173\u8054\u7c7b\u578b\uff0c\u50cf\u6cdb\u578b\u7684 T, \u9700\u8981\u6307\u660e\u7c7b\u578b"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-Rust",children:'pub struct Puppy;\r\ntrait Animal {\r\n    type Baby; // \u5173\u8054\u7c7b\u578b\r\n    fn have_baby(&self) ->Self::Baby;\r\n}\r\nimpl Animal for Dog {\r\n    type Baby = Puppy; // \u786e\u8ba4\u5173\u8054\u7c7b\u578b\r\n    fn have_baby(&self) -> Self::Baby {\r\n        println!("A puppy is born.");\r\n        Puppy\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"\u5b9e\u73b0trait",children:"\u5b9e\u73b0trait"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-Rust",children:'struct User {\r\n    id:i32,\r\n    name:String,\r\n}\r\n// \u5b9e\u73b0trait\r\nimpl Person for User {\r\n    fn say(&self)->String{\r\n        format!("id is {}, name is {}",self.id, self.name)\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.h6,{id:"trait-\u7684\u5b64\u513f\u89c4\u5219",children:"trait \u7684\u5b64\u513f\u89c4\u5219"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"\u5982\u679c\u4f60\u60f3\u8981\u4e3a\u7c7b\u578b"})," ",(0,t.jsx)(r.code,{children:"A"})," ",(0,t.jsx)(r.strong,{children:"\u5b9e\u73b0\u7279\u5f81"})," ",(0,t.jsx)(r.code,{children:"T"}),(0,t.jsx)(r.strong,{children:"\uff0c\u90a3\u4e48"})," ",(0,t.jsx)(r.code,{children:"A"})," ",(0,t.jsx)(r.strong,{children:"\u6216\u8005"})," ",(0,t.jsx)(r.code,{children:"T"})," ",(0,t.jsx)(r.strong,{children:"\u81f3\u5c11\u6709\u4e00\u4e2a\u662f\u5728\u5f53\u524d\u4f5c\u7528\u57df \u4e2d\u5b9a\u4e49\u7684\uff01"})]}),"\n",(0,t.jsx)(r.h6,{id:"trait-\u7684\u9ed8\u8ba4\u5b9e\u73b0",children:"trait \u7684\u9ed8\u8ba4\u5b9e\u73b0"}),"\n",(0,t.jsxs)(r.p,{children:["\u5b9a\u4e49\u5177\u6709",(0,t.jsx)(r.strong,{children:"\u9ed8\u8ba4\u5b9e\u73b0"}),"\u7684\u65b9\u6cd5\uff0c\u8fd9\u6837\u5176\u5b83\u7c7b\u578b\u65e0\u9700\u518d\u5b9e\u73b0\u8be5\u65b9\u6cd5\uff0c\u6216\u8005\u4e5f\u53ef\u4ee5\u9009\u62e9\u91cd\u8f7d\u8be5\u65b9\u6cd5"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-Rust",children:'pub trait Person {\r\n    fn author(&self)->String;\r\n    fn say(&self) { // \u6709\u5177\u4f53\u7684\u5b9e\u73b0\uff0c\u5176\u4ed6\u7c7b\u578b\u53ef\u4ee5\u4e0d\u5b9e\u73b0\u6216\u8005\u91cd\u8f7d\u8fd9\u4e2a\u65b9\u6cd5\r\n        print!("{} is saying", self.author());\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"trait \u4f5c\u4e3a\u53c2\u6570\u4f7f\u7528"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-Rust",children:'fn notify(item: &impl Person) { // \u53c2\u6570\u662ftrait, \u5199\u6cd5\u5c31\u662f impl trait\r\n    item.say();\r\n}\r\nfn notify2(item: &(impl Person+Display) { // \u591a\u91cd\u7ea6\u675f\uff0c\u53c2\u6570\u5fc5\u987b\u5b9e\u73b0Person\u548cDisplay\u7279\u5f81\r\n    item.say();\r\n}\r\nfn main() {\r\n    let u1 = User{name:String::from("aa")};\r\n    notify(&u1)\r\n}\n'})}),"\n",(0,t.jsx)(r.h6,{id:"\u7279\u5f81\u7ea6\u675f-trait-bound\u7ed1\u5b9a",children:"\u7279\u5f81\u7ea6\u675f (trait bound(\u7ed1\u5b9a))"}),"\n",(0,t.jsx)(r.p,{children:"trait \u4f5c\u4e3a\u53c2\u6570\u4f7f\u7528\uff0c\u6211\u4eec\u4f7f\u7528 impl trait \u5176\u5b9e\u662f\u4e00\u4e2a\u8bed\u6cd5\u7cd6\uff0c\u672c\u8d28\u662f\u8fd9\u6837\uff1a"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-Rust",children:"fn notify3<T: Person>(user:&T){ // \u5bf9T\u7c7b\u578b\uff0c\u5fc5\u987b\u5b9e\u73b0Person\u7279\u5f81\u8fdb\u884c\u9650\u5236\uff0cT: Person\u5c31\u662f\u7279\u5f81\u7ea6\u675f\r\n    user.say();\r\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"\u591a\u91cd\u7ea6\u675f"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-Rust",children:"fn notify3<T: Person+Display>(user:&T){ // \u5bf9T\u7c7b\u578b\uff0c\u5fc5\u987b\u5b9e\u73b0Person\u7279\u5f81\u8fdb\u884c\u9650\u5236\uff0cT: Person\u5c31\u662f\u7279\u5f81\u7ea6\u675f\r\n    user.say();\r\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"\u51fd\u6570\u8fd4\u56de\u4e2d\u7684 impl Trait\r\n\u53ef\u4ee5\u901a\u8fc7 impl Trait \u6765\u8bf4\u660e\u4e00\u4e2a\u51fd\u6570\u8fd4\u56de\u4e86\u4e00\u4e2a\u7c7b\u578b\uff0c\u8be5\u7c7b\u578b\u5b9e\u73b0\u4e86\u67d0\u4e2a\u7279\u5f81\u3002"}),"\n",(0,t.jsx)(r.p,{children:"\u4f46\u662f\u8fd9\u79cd\u5199\u6cd5\u6709\u4e2a\u7f3a\u70b9\uff0c\u53ea\u53ef\u4ee5\u8fd4\u56de\u4e00\u79cd\u5177\u4f53\u7684\u7c7b\u578b\uff0c\u8fd9\u79cd\u7c7b\u578b\u5b9e\u73b0\u4e86 Person trait"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-Rust",children:'fn createp(n:&str)->impl Person{\r\n    User{\r\n        name:String::from(n)\r\n    }\r\n}\r\nfn main() {\r\n    let u1 = createp("aa");\r\n    let u2 = createp("bb");\r\n}\n'})}),"\n",(0,t.jsx)(r.h5,{id:"trait-\u5bf9\u8c61",children:"Trait \u5bf9\u8c61"}),"\n",(0,t.jsx)(r.p,{children:"\u4e0a\u9762 User \u5b9e\u73b0\u4e86 Person, \u5982\u679c\u53c8\u6709\u4e00\u4e2a Child \u5b9e\u73b0\u4e86 Person."}),"\n",(0,t.jsx)(r.p,{children:"Trait \u5bf9\u8c61\u6307\u5411\u5b9e\u73b0\u4e86 Person \u7279\u5f81\u7684\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u4e5f\u5c31\u662f\u6307\u5411\u4e86 User \u6216\u8005 Child \u7684\u5b9e\u4f8b\uff0c\u8fd9\u79cd\u6620\u5c04\u5173\u7cfb\u662f\u5b58\u50a8\u5728\u4e00\u5f20\u8868\u4e2d\uff0c\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u901a\u8fc7\u7279\u5f81\u5bf9\u8c61\u627e\u5230\u5177\u4f53\u8c03\u7528\u7684\u7c7b\u578b\u65b9\u6cd5\u3002"}),"\n",(0,t.jsx)(r.p,{children:"\u7279\u5f81\u5bf9\u8c61\uff1aBox\uff0c\u5f53\u6210\u4e00\u4e2a\u5f15\u7528\u5373\u53ef\uff0c\u53ea\u4e0d\u8fc7\u5b83\u5305\u88f9\u7684\u503c\u4f1a\u88ab\u5f3a\u5236\u5206\u914d\u5728\u5806\u4e0a\u3002"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-Rust",children:'fn createp(n:&str, b:bool) -> Box<dyn Person>{ // \u8fd4\u56de\u4e00\u4e2a\u7279\u5f81\u5bf9\u8c61\uff08\u7c7b\u4f3c\u667a\u80fd\u6307\u9488\uff0c\u5f53\u505a\u4e00\u4e2a\u5f15\u7528\u5373\u53ef\uff09\r\n    if b {\r\n        Box::new(User{\r\n            name:String::from(n)\r\n        })\r\n    }else{\r\n        Box::new(Child{ // \u901a\u8fc7Box::new()\u521b\u5efa\u7279\u5f81\u5bf9\u8c61\r\n            name:String::from(n),\r\n            age:1\r\n        })\r\n    }\r\n}\r\nfn notify(item: Box<dyn Person>) { // \u53c2\u6570\u662f\u7279\u5f81\u5bf9\u8c61\r\n    item.say();\r\n}\r\nfn main() {\r\n    let u1 = createp("aa",true); \r\n    let u2 = createp("bb",false);\r\n    notify(u1);\r\n    notify(u2);\r\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"\u7279\u5f81\u5bf9\u8c61\u539f\u7406"}),"\n",(0,t.jsx)(r.p,{children:"\u6cdb\u578b\u662f\u5728\u7f16\u8bd1\u671f\u5b8c\u6210\u5904\u7406\u7684\uff1a\u7f16\u8bd1\u5668\u4f1a\u4e3a\u6bcf\u4e00\u4e2a\u6cdb\u578b\u53c2\u6570\u5bf9\u5e94\u7684\u5177\u4f53\u7c7b\u578b\u751f\u6210\u4e00\u4efd\u4ee3\u7801\uff0c\u8fd9\u79cd\u65b9\u5f0f\u662f\u9759\u6001\u5206\u53d1 (static dispatch)\uff0c\u56e0\u4e3a\u662f\u5728\u7f16\u8bd1\u671f\u5b8c\u6210\u7684\uff0c\u5bf9\u4e8e\u8fd0\u884c\u671f\u6027\u80fd\u5b8c\u5168\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\u3002"}),"\n",(0,t.jsx)(r.p,{children:"\u4e0e\u9759\u6001\u5206\u53d1\u76f8\u5bf9\u5e94\u7684\u662f\u52a8\u6001\u5206\u53d1 (dynamic dispatch)\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u76f4\u5230\u8fd0\u884c\u65f6\uff0c\u624d\u80fd\u786e\u5b9a\u9700\u8981\u8c03\u7528\u4ec0\u4e48\u65b9\u6cd5\u3002\u4e4b\u524d\u4ee3\u7801\u4e2d\u7684\u5173\u952e\u5b57 dyn \u6b63\u662f\u5728\u5f3a\u8c03\u8fd9\u4e00 \u201c\u52a8\u6001\u201d \u7684\u7279\u70b9\u3002"}),"\n",(0,t.jsx)(r.p,{children:"Box, \u5305\u542b\u4e86\u4e24\u4e2a\u6307\u9488"}),"\n",(0,t.jsx)(r.p,{children:"ptr: \u6307\u5411\u5b9e\u73b0\u4e86\u7279\u5f81 Person \u7684\u5177\u4f53\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u6bd4\u5982\u7c7b\u578b User \u7684\u5b9e\u4f8b\u3001\u7c7b\u578b Child \u7684\u5b9e\u4f8b"}),"\n",(0,t.jsx)(r.p,{children:"vptr \u6307\u5411\u4e00\u4e2a\u865a\u8868 vtable, \u4fdd\u5b58\u4e86\u5b9e\u4f8b\u5bf9\u4e8e\u53ef\u4ee5\u8c03\u7528\u7684\u5b9e\u73b0\u4e8e\u7279\u5f81 Person \u7684\u65b9\u6cd5"}),"\n",(0,t.jsx)(r.p,{children:"trait \u5bf9\u8c61\u7684\u9650\u5236\r\n\u4e0d\u662f\u6240\u6709\u7684 trait \u90fd\u6709 trait \u5bf9\u8c61\uff0c\u5fc5\u987b\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6\u7684 trait"}),"\n",(0,t.jsx)(r.p,{children:"\u65b9\u6cd5\u7684\u8fd4\u56de\u7c7b\u578b\u4e0d\u80fd\u662f Self\r\n\u65b9\u6cd5\u6ca1\u6709\u4efb\u4f55\u6cdb\u578b\u53c2\u6570"}),"\n",(0,t.jsx)(r.h2,{id:"derive",children:"Derive"}),"\n",(0,t.jsx)(r.p,{children:"\u7f16\u8bd1\u5668\u80fd\u591f\u901a\u8fc7 #[derive] \u5c5e\u6027\u4e3a\u67d0\u4e9b\u7279\u5f81\u63d0\u4f9b\u57fa\u672c\u5b9e\u73b0\u3002\u5982\u679c\u9700\u8981\u66f4\u590d\u6742\u7684\u884c\u4e3a\uff0c\u8fd9\u4e9b\u7279\u5f81\u4ecd\u7136\u53ef\u4ee5\u624b\u52a8\u5b9e\u73b0\u3002"}),"\n",(0,t.jsx)(r.p,{children:"\u4ee5\u4e0b\u662f\u53ef\u884d\u751f\u7279\u5f81\u7684\u5217\u8868\uff1a"}),"\n",(0,t.jsxs)(r.p,{children:["\u6bd4\u8f83\u7279\u5f81\uff1a Eq \u3001 PartialEq \u3001 Ord \u3001 PartialOrd \u3002\r\nClone \uff0c\u901a\u8fc7\u526f\u672c\u4ece &T \u521b\u5efa T \u3002\r\nCopy \uff0c\u7ed9\u51fa\u7c7b\u578b\u201c\u590d\u5236\u8bed\u4e49\u201d\u800c\u4e0d\u662f\u201c\u79fb\u52a8\u8bed\u4e49\u201d\u3002\r\nHash \uff0c\u4ece &T \u8ba1\u7b97\u54c8\u5e0c\u503c\u3002\r\nDefault \uff0c\u521b\u5efa\u6570\u636e\u7c7b\u578b\u7684\u7a7a\u5b9e\u4f8b\u3002\r\nDebug \uff0c\u4f7f\u7528 ",(0,t.jsx)(r.code,{children:"{:?}"})," \u683c\u5f0f\u5316\u7a0b\u5e8f\u683c\u5f0f\u5316\u503c\u3002"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'// `Centimeters`, a tuple struct that can be compared\r\n#[derive(PartialEq, PartialOrd)]\r\nstruct Centimeters(f64);\r\n\r\n// `Inches`, a tuple struct that can be printed\r\n#[derive(Debug)]\r\nstruct Inches(i32);\r\n\r\nimpl Inches {\r\n    fn to_centimeters(&self) -> Centimeters {\r\n        let &Inches(inches) = self;\r\n\r\n        Centimeters(inches as f64 * 2.54)\r\n    }\r\n}\r\n\r\n// `Seconds`, a tuple struct with no additional attributes\r\nstruct Seconds(i32);\r\n\r\nfn main() {\r\n    let _one_second = Seconds(1);\r\n\r\n    // Error: `Seconds` can\'t be printed; it doesn\'t implement the `Debug` trait\r\n    //println!("One second looks like: {:?}", _one_second);\r\n    // TODO ^ Try uncommenting this line\r\n\r\n    // Error: `Seconds` can\'t be compared; it doesn\'t implement the `PartialEq` trait\r\n    //let _this_is_true = (_one_second == _one_second);\r\n    // TODO ^ Try uncommenting this line\r\n\r\n    let foot = Inches(12);\r\n\r\n    println!("One foot equals {:?}", foot);\r\n\r\n    let meter = Centimeters(100.0);\r\n\r\n    let cmp =\r\n        if foot.to_centimeters() < meter {\r\n            "smaller"\r\n        } else {\r\n            "bigger"\r\n        };\r\n\r\n    println!("One foot is {} than one meter.", cmp);\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"\u4f7f\u7528dyn\u8fd4\u56de\u7279\u5f81",children:"\u4f7f\u7528dyn\u8fd4\u56de\u7279\u5f81"}),"\n",(0,t.jsx)(r.p,{children:"Rust \u7f16\u8bd1\u5668\u9700\u8981\u77e5\u9053\u6bcf\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u9700\u8981\u591a\u5c11\u7a7a\u95f4\u3002\u8fd9\u610f\u5473\u7740\u6240\u6709\u51fd\u6570\u90fd\u5fc5\u987b\u8fd4\u56de\u5177\u4f53\u7c7b\u578b\u3002\u4e0e\u5176\u4ed6\u8bed\u8a00\u4e0d\u540c\uff0c\u5982\u679c\u60a8\u5177\u6709 Animal \u8fd9\u6837\u7684\u7279\u5f81\uff0c\u5219\u65e0\u6cd5\u7f16\u5199\u8fd4\u56de Animal \u7684\u51fd\u6570\uff0c\u56e0\u4e3a\u5176\u4e0d\u540c\u7684\u5b9e\u73b0\u5c06\u9700\u8981\u4e0d\u540c\u7684\u5185\u5b58\u91cf\u3002"}),"\n",(0,t.jsx)(r.p,{children:"\u7136\u800c\uff0c\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6cd5\u3002\u6211\u4eec\u7684\u51fd\u6570\u4e0d\u662f\u76f4\u63a5\u8fd4\u56de\u7279\u5f81\u5bf9\u8c61\uff0c\u800c\u662f\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u4e00\u4e9b Animal \u7684 Box \u3002 box \u53ea\u662f\u5bf9\u5806\u4e2d\u67d0\u4e9b\u5185\u5b58\u7684\u5f15\u7528\u3002\u56e0\u4e3a\u5f15\u7528\u5177\u6709\u9759\u6001\u5df2\u77e5\u7684\u5927\u5c0f\uff0c\u5e76\u4e14\u7f16\u8bd1\u5668\u53ef\u4ee5\u4fdd\u8bc1\u5b83\u6307\u5411\u5806\u5206\u914d\u7684 Animal \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4ece\u51fd\u6570\u4e2d\u8fd4\u56de\u4e00\u4e2a\u7279\u5f81\uff01"}),"\n",(0,t.jsxs)(r.p,{children:["\u6bcf\u5f53 Rust \u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\u65f6\uff0c\u90fd\u4f1a\u5c1d\u8bd5\u5c3d\u53ef\u80fd\u660e\u786e\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u7684\u51fd\u6570\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8fd4\u56de\u6307\u5411\u5806\u4e0a\u7279\u5f81\u7684\u6307\u9488\uff0c\u5219\u9700\u8981\u4f7f\u7528 dyn \u5173\u952e\u5b57\u7f16\u5199\u8fd4\u56de\u7c7b\u578b\uff0c\u4f8b\u5982 ",(0,t.jsx)(r.code,{children:"Box<dyn Animal>"})," \u3002"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'struct Sheep {}\r\nstruct Cow {}\r\n\r\ntrait Animal {\r\n    // Instance method signature\r\n    fn noise(&self) -> &\'static str;\r\n}\r\n\r\n// Implement the `Animal` trait for `Sheep`.\r\nimpl Animal for Sheep {\r\n    fn noise(&self) -> &\'static str {\r\n        "baaaaah!"\r\n    }\r\n}\r\n\r\n// Implement the `Animal` trait for `Cow`.\r\nimpl Animal for Cow {\r\n    fn noise(&self) -> &\'static str {\r\n        "moooooo!"\r\n    }\r\n}\r\n\r\n// Returns some struct that implements Animal, but we don\'t know which one at compile time.\r\nfn random_animal(random_number: f64) -> Box<dyn Animal> {\r\n    if random_number < 0.5 {\r\n        Box::new(Sheep {})\r\n    } else {\r\n        Box::new(Cow {})\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let random_number = 0.234;\r\n    let animal = random_animal(random_number);\r\n    println!("You\'ve randomly chosen an animal, and it says {}", animal.noise());\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"\u8fd0\u7b97\u7b26\u91cd\u8f7d",children:"\u8fd0\u7b97\u7b26\u91cd\u8f7d"}),"\n",(0,t.jsx)(r.p,{children:"\u5728 Rust \u4e2d\uff0c\u8bb8\u591a\u8fd0\u7b97\u7b26\u53ef\u4ee5\u901a\u8fc7\u7279\u5f81\u91cd\u8f7d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e9b\u8fd0\u7b97\u7b26\u53ef\u7528\u4e8e\u6839\u636e\u5176\u8f93\u5165\u53c2\u6570\u5b8c\u6210\u4e0d\u540c\u7684\u4efb\u52a1\u3002\u8fd9\u662f\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u8fd0\u7b97\u7b26\u662f\u65b9\u6cd5\u8c03\u7528\u7684\u8bed\u6cd5\u7cd6\u3002\u4f8b\u5982\uff0c a + b \u4e2d\u7684 + \u8fd0\u7b97\u7b26\u8c03\u7528 add \u65b9\u6cd5\uff08\u5982 a.add(b) \u4e2d\uff09\u3002\u6b64 add \u65b9\u6cd5\u662f Add \u7279\u5f81\u7684\u4e00\u90e8\u5206\u3002\u56e0\u6b64\uff0c + \u8fd0\u7b97\u7b26\u53ef\u4ee5\u7531 Add \u7279\u5f81\u7684\u4efb\u4f55\u5b9e\u73b0\u8005\u4f7f\u7528\u3002"}),"\n",(0,t.jsx)(r.p,{children:"\u53ef\u4ee5\u5728 core::ops \u4e2d\u627e\u5230\u91cd\u8f7d\u8fd0\u7b97\u7b26\u7684\u7279\u5f81\u5217\u8868\uff0c\u4f8b\u5982 Add \u3002"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'use std::ops;\r\n\r\nstruct Foo;\r\nstruct Bar;\r\n\r\n#[derive(Debug)]\r\nstruct FooBar;\r\n\r\n#[derive(Debug)]\r\nstruct BarFoo;\r\n\r\n// The `std::ops::Add` trait is used to specify the functionality of `+`.\r\n// Here, we make `Add<Bar>` - the trait for addition with a RHS of type `Bar`.\r\n// The following block implements the operation: Foo + Bar = FooBar\r\nimpl ops::Add<Bar> for Foo {\r\n    type Output = FooBar;\r\n\r\n    fn add(self, _rhs: Bar) -> FooBar {\r\n        println!("> Foo.add(Bar) was called");\r\n\r\n        FooBar\r\n    }\r\n}\r\n\r\n// By reversing the types, we end up implementing non-commutative addition.\r\n// Here, we make `Add<Foo>` - the trait for addition with a RHS of type `Foo`.\r\n// This block implements the operation: Bar + Foo = BarFoo\r\nimpl ops::Add<Foo> for Bar {\r\n    type Output = BarFoo;\r\n\r\n    fn add(self, _rhs: Foo) -> BarFoo {\r\n        println!("> Bar.add(Foo) was called");\r\n\r\n        BarFoo\r\n    }\r\n}\r\n\r\nfn main() {\r\n    println!("Foo + Bar = {:?}", Foo + Bar);\r\n    println!("Bar + Foo = {:?}", Bar + Foo);\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"drop",children:"Drop"}),"\n",(0,t.jsx)(r.p,{children:"Drop \u7279\u5f81\u53ea\u6709\u4e00\u4e2a\u65b9\u6cd5\uff1a drop \uff0c\u5f53\u5bf9\u8c61\u8d85\u51fa\u8303\u56f4\u65f6\u4f1a\u81ea\u52a8\u8c03\u7528\u8be5\u65b9\u6cd5\u3002 Drop \u7279\u5f81\u7684\u4e3b\u8981\u7528\u9014\u662f\u91ca\u653e\u5b9e\u73b0\u8005\u5b9e\u4f8b\u62e5\u6709\u7684\u8d44\u6e90\u3002"}),"\n",(0,t.jsx)(r.p,{children:"Box \u3001 Vec \u3001 String \u3001 File \u548c Process \u662f\u5b9e\u73b0 Drop \u514d\u8d39\u8d44\u6e90\u7684\u7279\u5f81\u3002\u8fd8\u53ef\u4ee5\u4e3a\u4efb\u4f55\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\u624b\u52a8\u5b9e\u73b0 Drop \u7279\u5f81\u3002"}),"\n",(0,t.jsx)(r.p,{children:"\u4ee5\u4e0b\u793a\u4f8b\u5c06\u6253\u5370\u5230\u63a7\u5236\u53f0\u6dfb\u52a0\u5230 drop \u51fd\u6570\uff0c\u4ee5\u5728\u8c03\u7528\u8be5\u51fd\u6570\u65f6\u8fdb\u884c\u901a\u77e5\u3002"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'struct Droppable {\r\n    name: &\'static str,\r\n}\r\n\r\n// This trivial implementation of `drop` adds a print to console.\r\nimpl Drop for Droppable {\r\n    fn drop(&mut self) {\r\n        println!("> Dropping {}", self.name);\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let _a = Droppable { name: "a" };\r\n\r\n    // block A\r\n    {\r\n        let _b = Droppable { name: "b" };\r\n\r\n        // block B\r\n        {\r\n            let _c = Droppable { name: "c" };\r\n            let _d = Droppable { name: "d" };\r\n\r\n            println!("Exiting block B");\r\n        }\r\n        println!("Just exited block B");\r\n\r\n        println!("Exiting block A");\r\n    }\r\n    println!("Just exited block A");\r\n\r\n    // Variable can be manually dropped using the `drop` function\r\n    drop(_a);\r\n    // TODO ^ Try commenting this line\r\n\r\n    println!("end of the main function");\r\n\r\n    // `_a` *won\'t* be `drop`ed again here, because it already has been\r\n    // (manually) `drop`ed\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"super-traits",children:"super traits"}),"\n",(0,t.jsx)(r.p,{children:"Rust \u6ca1\u6709\u201c\u7ee7\u627f\u201d\uff0c\u4f46\u60a8\u53ef\u4ee5\u5c06\u4e00\u4e2a\u7279\u5f81\u5b9a\u4e49\u4e3a\u53e6\u4e00\u4e2a\u7279\u5f81\u7684\u8d85\u96c6\u3002\u4f8b\u5982\uff1a"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'trait Person {\r\n    fn name(&self) -> String;\r\n}\r\n\r\n// Person is a supertrait of Student.\r\n// Implementing Student requires you to also impl Person.\r\ntrait Student: Person {\r\n    fn university(&self) -> String;\r\n}\r\n\r\ntrait Programmer {\r\n    fn fav_language(&self) -> String;\r\n}\r\n\r\n// CompSciStudent (computer science student) is a subtrait of both Programmer \r\n// and Student. Implementing CompSciStudent requires you to impl both supertraits.\r\ntrait CompSciStudent: Programmer + Student {\r\n    fn git_username(&self) -> String;\r\n}\r\n\r\nfn comp_sci_student_greeting(student: &dyn CompSciStudent) -> String {\r\n    format!(\r\n        "My name is {} and I attend {}. My favorite language is {}. My Git username is {}",\r\n        student.name(),\r\n        student.university(),\r\n        student.fav_language(),\r\n        student.git_username()\r\n    )\r\n}\r\n\r\nfn main() {}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"\u6d88\u9664\u91cd\u53e0\u7279\u5f81\u7684\u6b67\u4e49",children:"\u6d88\u9664\u91cd\u53e0\u7279\u5f81\u7684\u6b67\u4e49"}),"\n",(0,t.jsx)(r.p,{children:"\u4e00\u4e2a\u7c7b\u578b\u53ef\u4ee5\u5b9e\u73b0\u8bb8\u591a\u4e0d\u540c\u7684\u7279\u5f81\u3002\u5982\u679c\u4e24\u4e2a\u7279\u5f81\u90fd\u9700\u8981\u76f8\u540c\u7684\u51fd\u6570\u540d\u79f0\u600e\u4e48\u529e\uff1f\u4f8b\u5982\uff0c\u8bb8\u591a\u7279\u5f81\u53ef\u80fd\u6709\u4e00\u4e2a\u540d\u4e3a get() \u7684\u65b9\u6cd5\u3002\u4ed6\u4eec\u751a\u81f3\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u8fd4\u56de\u7c7b\u578b\uff01"}),"\n",(0,t.jsx)(r.p,{children:"\u597d\u6d88\u606f\uff1a\u56e0\u4e3a\u6bcf\u4e2a\u7279\u5f81\u5b9e\u73b0\u90fd\u6709\u81ea\u5df1\u7684 impl \u5757\uff0c\u6240\u4ee5\u5f88\u6e05\u695a\u60a8\u6b63\u5728\u5b9e\u73b0\u54ea\u4e2a\u7279\u5f81\u7684 get \u65b9\u6cd5\u3002"}),"\n",(0,t.jsx)(r.p,{children:"\u5f53\u9700\u8981\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\u65f6\u600e\u4e48\u529e\uff1f\u4e3a\u4e86\u6d88\u9664\u5b83\u4eec\u4e4b\u95f4\u7684\u6b67\u4e49\uff0c\u6211\u4eec\u5fc5\u987b\u4f7f\u7528\u5b8c\u5168\u9650\u5b9a\u8bed\u6cd5\u3002"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'trait UsernameWidget {\r\n    // Get the selected username out of this widget\r\n    fn get(&self) -> String;\r\n}\r\n\r\ntrait AgeWidget {\r\n    // Get the selected age out of this widget\r\n    fn get(&self) -> u8;\r\n}\r\n\r\n// A form with both a UsernameWidget and an AgeWidget\r\nstruct Form {\r\n    username: String,\r\n    age: u8,\r\n}\r\n\r\nimpl UsernameWidget for Form {\r\n    fn get(&self) -> String {\r\n        self.username.clone()\r\n    }\r\n}\r\n\r\nimpl AgeWidget for Form {\r\n    fn get(&self) -> u8 {\r\n        self.age\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let form = Form {\r\n        username: "rustacean".to_owned(),\r\n        age: 28,\r\n    };\r\n\r\n    // If you uncomment this line, you\'ll get an error saying\r\n    // "multiple `get` found". Because, after all, there are multiple methods\r\n    // named `get`.\r\n    // println!("{}", form.get());\r\n\r\n    let username = <Form as UsernameWidget>::get(&form);\r\n    assert_eq!("rustacean".to_owned(), username);\r\n    let age = <Form as AgeWidget>::get(&form);\r\n    assert_eq!(28, age);\r\n}\n'})})]})}function p(n={}){const{wrapper:r}={...(0,i.R)(),...n.components};return r?(0,t.jsx)(r,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},8453:(n,r,e)=>{e.d(r,{R:()=>a,x:()=>l});var t=e(6540);const i={},s=t.createContext(i);function a(n){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(r):{...r,...n}}),[r,n])}function l(n){let r;return r=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),t.createElement(s.Provider,{value:r},n.children)}}}]);