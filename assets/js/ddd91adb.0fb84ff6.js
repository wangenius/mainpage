"use strict";(self.webpackChunkwangenius=self.webpackChunkwangenius||[]).push([[7106],{9609:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>o});var t=r(4848),i=r(8453);const s={title:"impl trait",sidebar_position:3,slug:"impl trait"},l="impl trait",a={id:"lang/rust/\u7279\u5f81/impl trait",title:"impl trait",description:"impl Trait \u53ef\u4ee5\u5728\u4e24\u4e2a\u4f4d\u7f6e\u4f7f\u7528\uff1a",source:"@site/docs/lang/rust/\u7279\u5f81/impl trait.mdx",sourceDirName:"lang/rust/\u7279\u5f81",slug:"/lang/rust/\u7279\u5f81/impl trait",permalink:"/mainpage/docs/lang/rust/\u7279\u5f81/impl trait",draft:!1,unlisted:!1,editUrl:"https://github.com/wangenius/mainpage/tree/master/docs/lang/rust/\u7279\u5f81/impl trait.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"impl trait",sidebar_position:3,slug:"impl trait"},sidebar:"rust",previous:{title:"\u8fed\u4ee3\u5668",permalink:"/mainpage/docs/lang/rust/\u7279\u5f81/\u8fed\u4ee3\u5668"},next:{title:"clone",permalink:"/mainpage/docs/lang/rust/\u7279\u5f81/clone"}},c={},o=[{value:"\u4f5c\u4e3a\u53c2\u6570\u7c7b\u578b",id:"\u4f5c\u4e3a\u53c2\u6570\u7c7b\u578b",level:2},{value:"\u4f5c\u4e3a\u8fd4\u56de\u7c7b\u578b",id:"\u4f5c\u4e3a\u8fd4\u56de\u7c7b\u578b",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"impl-trait",children:"impl trait"}),"\n",(0,t.jsx)(n.p,{children:"impl Trait \u53ef\u4ee5\u5728\u4e24\u4e2a\u4f4d\u7f6e\u4f7f\u7528\uff1a"}),"\n",(0,t.jsx)(n.p,{children:"\u4f5c\u4e3a\u53c2\u6570\u7c7b\u578b\r\n\u4f5c\u4e3a\u8fd4\u56de\u7c7b\u578b"}),"\n",(0,t.jsx)(n.h2,{id:"\u4f5c\u4e3a\u53c2\u6570\u7c7b\u578b",children:"\u4f5c\u4e3a\u53c2\u6570\u7c7b\u578b"}),"\n",(0,t.jsx)(n.p,{children:"\u5982\u679c\u60a8\u7684\u51fd\u6570\u5728\u7279\u5f81\u4e0a\u662f\u901a\u7528\u7684\uff0c\u4f46\u60a8\u4e0d\u4ecb\u610f\u7279\u5b9a\u7c7b\u578b\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 impl Trait \u4f5c\u4e3a\u53c2\u6570\u7c7b\u578b\u6765\u7b80\u5316\u51fd\u6570\u58f0\u660e\u3002"}),"\n",(0,t.jsx)(n.p,{children:"\u4f8b\u5982\uff0c\u8003\u8651\u4ee5\u4e0b\u4ee3\u7801\uff1a"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"fn parse_csv_document<R: std::io::BufRead>(src: R) -> std::io::Result<Vec<Vec<String>>> {\r\n    src.lines()\r\n        .map(|line| {\r\n            // For each line in the source\r\n            line.map(|line| {\r\n                // If the line was read successfully, process it, if not, return the error\r\n                line.split(',') // Split the line separated by commas\r\n                    .map(|entry| String::from(entry.trim())) // Remove leading and trailing whitespace\r\n                    .collect() // Collect all strings in a row into a Vec<String>\r\n            })\r\n        })\r\n        .collect() // Collect all lines into a Vec<Vec<String>>\r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["parse_csv_document \u662f\u901a\u7528\u7684\uff0c\u5141\u8bb8\u5b83\u91c7\u7528\u4efb\u4f55\u5b9e\u73b0 BufRead \u7684\u7c7b\u578b\uff0c\u4f8b\u5982 ",(0,t.jsx)(n.code,{children:"BufReader<File>"})," \u6216 [u8] \uff0c\u4f46\u4ec0\u4e48\u7c7b\u578b R \u662f\uff0c\u800c R \u4ec5\u7528\u4e8e\u58f0\u660e src \u7684\u7c7b\u578b\uff0c\u56e0\u6b64\u8be5\u51fd\u6570\u4e5f\u53ef\u4ee5\u5199\u4e3a\uff1a"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"fn parse_csv_document(src: impl std::io::BufRead) -> std::io::Result<Vec<Vec<String>>> {\r\n    src.lines()\r\n        .map(|line| {\r\n            // For each line in the source\r\n            line.map(|line| {\r\n                // If the line was read successfully, process it, if not, return the error\r\n                line.split(',') // Split the line separated by commas\r\n                    .map(|entry| String::from(entry.trim())) // Remove leading and trailing whitespace\r\n                    .collect() // Collect all strings in a row into a Vec<String>\r\n            })\r\n        })\r\n        .collect() // Collect all lines into a Vec<Vec<String>>\r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["\u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528 impl Trait \u4f5c\u4e3a\u53c2\u6570\u7c7b\u578b\u610f\u5473\u7740\u60a8\u65e0\u6cd5\u660e\u786e\u8bf4\u660e\u60a8\u4f7f\u7528\u7684\u51fd\u6570\u5f62\u5f0f\uff0c\u5373 ",(0,t.jsx)(n.code,{children:"parse_csv_document::<std::io::Empty>(std::io::empty())"})," \u4e0d\u9002\u7528\u4e8e\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u3002"]}),"\n",(0,t.jsx)(n.h2,{id:"\u4f5c\u4e3a\u8fd4\u56de\u7c7b\u578b",children:"\u4f5c\u4e3a\u8fd4\u56de\u7c7b\u578b"}),"\n",(0,t.jsx)(n.p,{children:"\u5982\u679c\u60a8\u7684\u51fd\u6570\u8fd4\u56de\u5b9e\u73b0 MyTrait \u7684\u7c7b\u578b\uff0c\u5219\u53ef\u4ee5\u5c06\u5176\u8fd4\u56de\u7c7b\u578b\u7f16\u5199\u4e3a -> impl MyTrait \u3002\u8fd9\u53ef\u4ee5\u5e2e\u52a9\u5927\u5927\u7b80\u5316\u60a8\u7684\u7c7b\u578b\u7b7e\u540d\uff01"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use std::iter;\r\nuse std::vec::IntoIter;\r\n\r\n// This function combines two `Vec<i32>` and returns an iterator over it.\r\n// Look how complicated its return type is!\r\nfn combine_vecs_explicit_return_type(\r\n    v: Vec<i32>,\r\n    u: Vec<i32>,\r\n) -> iter::Cycle<iter::Chain<IntoIter<i32>, IntoIter<i32>>> {\r\n    v.into_iter().chain(u.into_iter()).cycle()\r\n}\r\n\r\n// This is the exact same function, but its return type uses `impl Trait`.\r\n// Look how much simpler it is!\r\nfn combine_vecs(\r\n    v: Vec<i32>,\r\n    u: Vec<i32>,\r\n) -> impl Iterator<Item=i32> {\r\n    v.into_iter().chain(u.into_iter()).cycle()\r\n}\r\n\r\nfn main() {\r\n    let v1 = vec![1, 2, 3];\r\n    let v2 = vec![4, 5];\r\n    let mut v3 = combine_vecs(v1, v2);\r\n    assert_eq!(Some(1), v3.next());\r\n    assert_eq!(Some(2), v3.next());\r\n    assert_eq!(Some(3), v3.next());\r\n    assert_eq!(Some(4), v3.next());\r\n    assert_eq!(Some(5), v3.next());\r\n    println!("all done");\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"\u66f4\u91cd\u8981\u7684\u662f\uff0c\u6709\u4e9b Rust \u7c7b\u578b\u65e0\u6cd5\u5199\u51fa\u3002\u4f8b\u5982\uff0c\u6bcf\u4e2a\u95ed\u5305\u90fd\u6709\u81ea\u5df1\u7684\u672a\u547d\u540d\u5177\u4f53\u7c7b\u578b\u3002\u5728 impl Trait \u8bed\u6cd5\u4e4b\u524d\uff0c\u60a8\u5fc5\u987b\u5728\u5806\u4e0a\u5206\u914d\u624d\u80fd\u8fd4\u56de\u95ed\u5305\u3002\u4f46\u73b0\u5728\u4f60\u53ef\u4ee5\u9759\u6001\u5730\u5b8c\u6210\u8fd9\u4e00\u5207\uff0c\u5982\u4e0b\u6240\u793a\uff1a"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"// Returns a function that adds `y` to its input\r\nfn make_adder_function(y: i32) -> impl Fn(i32) -> i32 {\r\n    let closure = move |x: i32| { x + y };\r\n    closure\r\n}\r\n\r\nfn main() {\r\n    let plus_one = make_adder_function(1);\r\n    assert_eq!(plus_one(2), 3);\r\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528 impl Trait \u8fd4\u56de\u4f7f\u7528 map \u6216 filter \u95ed\u5305\u7684\u8fed\u4ee3\u5668\uff01\u8fd9\u4f7f\u5f97 map \u548c filter \u7684\u4f7f\u7528\u66f4\u52a0\u5bb9\u6613\u3002\u7531\u4e8e\u95ed\u5305\u7c7b\u578b\u6ca1\u6709\u540d\u79f0\uff0c\u56e0\u6b64\u5982\u679c\u51fd\u6570\u8fd4\u56de\u5e26\u95ed\u5305\u7684\u8fed\u4ee3\u5668\uff0c\u5219\u65e0\u6cd5\u5199\u51fa\u663e\u5f0f\u8fd4\u56de\u7c7b\u578b\u3002\u4f46\u4f7f\u7528 impl Trait \u4f60\u53ef\u4ee5\u8f7b\u677e\u505a\u5230\u8fd9\u4e00\u70b9\uff1a"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"fn double_positives<'a>(numbers: &'a Vec<i32>) -> impl Iterator<Item = i32> + 'a {\r\n    numbers\r\n        .iter()\r\n        .filter(|x| x > &&0)\r\n        .map(|x| x * 2)\r\n}\r\n\r\nfn main() {\r\n    let singles = vec![-3, -2, 2, 3];\r\n    let doubles = double_positives(&singles);\r\n    assert_eq!(doubles.collect::<Vec<i32>>(), vec![4, 6]);\r\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var t=r(6540);const i={},s=t.createContext(i);function l(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);