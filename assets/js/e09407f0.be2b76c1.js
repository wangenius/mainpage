"use strict";(self.webpackChunkpanovista=self.webpackChunkpanovista||[]).push([[4530],{5314:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var t=r(4848),s=r(8453);const i={title:"\u591a\u79cd\u9519\u8bef\u7c7b\u578b",sidebar_position:5,slug:"\u591a\u79cd\u9519\u8bef\u7c7b\u578b"},o="\u591a\u79cd\u9519\u8bef\u7c7b\u578b",l={id:"lang/rust/\u9519\u8bef\u5904\u7406/\u591a\u79cd\u9519\u8bef\u7c7b\u578b",title:"\u591a\u79cd\u9519\u8bef\u7c7b\u578b",description:"\u524d\u9762\u7684\u4f8b\u5b50\u4e00\u76f4\u90fd\u5f88\u65b9\u4fbf\uff1b Result \u4e0e\u5176\u4ed6 Result \u4ea4\u4e92\uff0c Option \u4e0e\u5176\u4ed6 Option \u4ea4\u4e92\u3002",source:"@site/docs/lang/rust/\u9519\u8bef\u5904\u7406/\u591a\u79cd\u9519\u8bef\u7c7b\u578b.mdx",sourceDirName:"lang/rust/\u9519\u8bef\u5904\u7406",slug:"/lang/rust/\u9519\u8bef\u5904\u7406/\u591a\u79cd\u9519\u8bef\u7c7b\u578b",permalink:"/docs/lang/rust/\u9519\u8bef\u5904\u7406/\u591a\u79cd\u9519\u8bef\u7c7b\u578b",draft:!1,unlisted:!1,editUrl:"https://github.com/wangenius/wangenius.github.io/tree/master/docs/lang/rust/\u9519\u8bef\u5904\u7406/\u591a\u79cd\u9519\u8bef\u7c7b\u578b.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"\u591a\u79cd\u9519\u8bef\u7c7b\u578b",sidebar_position:5,slug:"\u591a\u79cd\u9519\u8bef\u7c7b\u578b"},sidebar:"rust",previous:{title:"Result",permalink:"/docs/lang/rust/\u9519\u8bef\u5904\u7406/Result"},next:{title:"\u7b80\u4ecb",permalink:"/docs/lang/rust/\u9879\u76ee\u5b66\u4e60/\u7b80\u4ecb"}},u={},a=[{value:"\u5c06 Result \u4ece Option \u4e2d\u53d6\u51fa",id:"\u5c06-result-\u4ece-option-\u4e2d\u53d6\u51fa",level:2},{value:"\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b",id:"\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b",level:2},{value:"Box \u9519\u8bef",id:"box-\u9519\u8bef",level:2},{value:"? \u7684\u5176\u4ed6\u7528\u9014",id:"-\u7684\u5176\u4ed6\u7528\u9014",level:2},{value:"\u6362\u884c\u9519\u8bef",id:"\u6362\u884c\u9519\u8bef",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"\u591a\u79cd\u9519\u8bef\u7c7b\u578b",children:"\u591a\u79cd\u9519\u8bef\u7c7b\u578b"}),"\n",(0,t.jsx)(n.p,{children:"\u524d\u9762\u7684\u4f8b\u5b50\u4e00\u76f4\u90fd\u5f88\u65b9\u4fbf\uff1b Result \u4e0e\u5176\u4ed6 Result \u4ea4\u4e92\uff0c Option \u4e0e\u5176\u4ed6 Option \u4ea4\u4e92\u3002"}),"\n",(0,t.jsxs)(n.p,{children:["\u6709\u65f6 Option \u9700\u8981\u4e0e Result \u4ea4\u4e92\uff0c\u6216\u8005 ",(0,t.jsx)(n.code,{children:"Result<T, Error1>"})," \u9700\u8981\u4e0e ",(0,t.jsx)(n.code,{children:"Result<T, Error2>"})," \u4ea4\u4e92\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u4ee5\u4e00\u79cd\u4f7f\u5b83\u4eec\u53ef\u7ec4\u5408\u4e14\u6613\u4e8e\u4ea4\u4e92\u7684\u65b9\u5f0f\u6765\u7ba1\u7406\u4e0d\u540c\u7684\u9519\u8bef\u7c7b\u578b\u3002"]}),"\n",(0,t.jsxs)(n.p,{children:["\u5728\u4ee5\u4e0b\u4ee3\u7801\u4e2d\uff0c unwrap \u7684\u4e24\u4e2a\u5b9e\u4f8b\u751f\u6210\u4e0d\u540c\u7684\u9519\u8bef\u7c7b\u578b\u3002 Vec::first \u8fd4\u56de Option \uff0c\u800c ",(0,t.jsx)(n.code,{children:"parse::<i32>"})," \u8fd4\u56de ",(0,t.jsx)(n.code,{children:"Result<i32, ParseIntError>"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'fn double_first(vec: Vec<&str>) -> i32 {\n    let first = vec.first().unwrap(); // Generate error 1\n    2 * first.parse::<i32>().unwrap() // Generate error 2\n}\n\nfn main() {\n    let numbers = vec!["42", "93", "18"];\n    let empty = vec![];\n    let strings = vec!["tofu", "93", "18"];\n\n    println!("The first doubled is {}", double_first(numbers));\n\n    println!("The first doubled is {}", double_first(empty));\n    // Error 1: the input vector is empty\n\n    println!("The first doubled is {}", double_first(strings));\n    // Error 2: the element doesn\'t parse to a number\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"\u5c06-result-\u4ece-option-\u4e2d\u53d6\u51fa",children:"\u5c06 Result \u4ece Option \u4e2d\u53d6\u51fa"}),"\n",(0,t.jsx)(n.p,{children:"\u5904\u7406\u6df7\u5408\u9519\u8bef\u7c7b\u578b\u7684\u6700\u57fa\u672c\u65b9\u6cd5\u662f\u5c06\u5b83\u4eec\u76f8\u4e92\u5d4c\u5165\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use std::num::ParseIntError;\n\nfn double_first(vec: Vec<&str>) -> Option<Result<i32, ParseIntError>> {\n    vec.first().map(|first| {\n        first.parse::<i32>().map(|n| 2 * n)\n    })\n}\n\nfn main() {\n    let numbers = vec!["42", "93", "18"];\n    let empty = vec![];\n    let strings = vec!["tofu", "93", "18"];\n\n    println!("The first doubled is {:?}", double_first(numbers));\n\n    println!("The first doubled is {:?}", double_first(empty));\n    // Error 1: the input vector is empty\n\n    println!("The first doubled is {:?}", double_first(strings));\n    // Error 2: the element doesn\'t parse to a number\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"\u6709\u65f6\u6211\u4eec\u5e0c\u671b\u505c\u6b62\u5904\u7406\u9519\u8bef\uff08\u4f8b\u5982 ? \uff09\uff0c\u4f46\u5f53 Option \u4e3a None \u65f6\u7ee7\u7eed\u5904\u7406\u3002\u51e0\u4e2a\u7ec4\u5408\u5668\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u6765\u4ea4\u6362 Result \u548c Option \u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use std::num::ParseIntError;\n\nfn double_first(vec: Vec<&str>) -> Result<Option<i32>, ParseIntError> {\n    let opt = vec.first().map(|first| {\n        first.parse::<i32>().map(|n| 2 * n)\n    });\n\n    opt.map_or(Ok(None), |r| r.map(Some))\n}\n\nfn main() {\n    let numbers = vec!["42", "93", "18"];\n    let empty = vec![];\n    let strings = vec!["tofu", "93", "18"];\n\n    println!("The first doubled is {:?}", double_first(numbers));\n    println!("The first doubled is {:?}", double_first(empty));\n    println!("The first doubled is {:?}", double_first(strings));\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b",children:"\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b"}),"\n",(0,t.jsx)(n.p,{children:"\u6709\u65f6\uff0c\u5b83\u4f1a\u7b80\u5316\u4ee3\u7801\uff0c\u7528\u5355\u4e00\u7c7b\u578b\u7684\u9519\u8bef\u63a9\u76d6\u6240\u6709\u4e0d\u540c\u7684\u9519\u8bef\u3002\u6211\u4eec\u5c06\u7528\u81ea\u5b9a\u4e49\u9519\u8bef\u6765\u5c55\u793a\u8fd9\u4e00\u70b9\u3002"}),"\n",(0,t.jsx)(n.p,{children:"Rust \u5141\u8bb8\u6211\u4eec\u5b9a\u4e49\u81ea\u5df1\u7684\u9519\u8bef\u7c7b\u578b\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u201c\u597d\u7684\u201d\u9519\u8bef\u7c7b\u578b\uff1a"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"\u4ee3\u8868\u76f8\u540c\u7c7b\u578b\u7684\u4e0d\u540c\u9519\u8bef"}),"\n",(0,t.jsx)(n.li,{children:"\u5411\u7528\u6237\u5448\u73b0\u6f02\u4eae\u7684\u9519\u8bef\u6d88\u606f"}),"\n",(0,t.jsxs)(n.li,{children:["\u6613\u4e8e\u4e0e\u5176\u4ed6\u7c7b\u578b\u8fdb\u884c\u6bd4\u8f83","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"\u597d\uff1a Err(EmptyVec)"}),"\n",(0,t.jsx)(n.li,{children:'\u574f\uff1a Err("Please use a vector with at least one element".to_owned())'}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\u53ef\u4ee5\u4fdd\u5b58\u6709\u5173\u9519\u8bef\u7684\u4fe1\u606f","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"\u597d\uff1a Err(BadChar(c, position))"}),"\n",(0,t.jsx)(n.li,{children:'\u574f\uff1a Err("+ cannot be used here".to_owned())'}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"\u4e0e\u5176\u4ed6\u9519\u8bef\u7ec4\u5408\u826f\u597d"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use std::fmt;\n\ntype Result<T> = std::result::Result<T, DoubleError>;\n\n// Define our error types. These may be customized for our error handling cases.\n// Now we will be able to write our own errors, defer to an underlying error\n// implementation, or do something in between.\n#[derive(Debug, Clone)]\nstruct DoubleError;\n\n// Generation of an error is completely separate from how it is displayed.\n// There\'s no need to be concerned about cluttering complex logic with the display style.\n//\n// Note that we don\'t store any extra info about the errors. This means we can\'t state\n// which string failed to parse without modifying our types to carry that information.\nimpl fmt::Display for DoubleError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, "invalid first item to double")\n    }\n}\n\nfn double_first(vec: Vec<&str>) -> Result<i32> {\n    vec.first()\n        // Change the error to our new type.\n        .ok_or(DoubleError)\n        .and_then(|s| {\n            s.parse::<i32>()\n                // Update to the new error type here also.\n                .map_err(|_| DoubleError)\n                .map(|i| 2 * i)\n        })\n}\n\nfn print(result: Result<i32>) {\n    match result {\n        Ok(n) => println!("The first doubled is {}", n),\n        Err(e) => println!("Error: {}", e),\n    }\n}\n\nfn main() {\n    let numbers = vec!["42", "93", "18"];\n    let empty = vec![];\n    let strings = vec!["tofu", "93", "18"];\n\n    print(double_first(numbers));\n    print(double_first(empty));\n    print(double_first(strings));\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"box-\u9519\u8bef",children:"Box \u9519\u8bef"}),"\n",(0,t.jsx)(n.p,{children:"\u5728\u4fdd\u7559\u539f\u59cb\u9519\u8bef\u7684\u540c\u65f6\u7f16\u5199\u7b80\u5355\u4ee3\u7801\u7684\u4e00\u79cd\u65b9\u6cd5\u662f Box \u5b83\u4eec\u3002\u7f3a\u70b9\u662f\u5e95\u5c42\u9519\u8bef\u7c7b\u578b\u4ec5\u5728\u8fd0\u884c\u65f6\u5df2\u77e5\uff0c\u800c\u4e0d\u662f\u9759\u6001\u786e\u5b9a\u7684\u3002"}),"\n",(0,t.jsxs)(n.p,{children:["stdlib \u901a\u8fc7 Box \u5b9e\u73b0\u4ece\u4efb\u4f55\u5b9e\u73b0 Error \u7279\u5f81\u7684\u7c7b\u578b\u5230\u7279\u5f81\u5bf9\u8c61 ",(0,t.jsx)(n.code,{children:"Box<Error>"})," \u7684\u8f6c\u6362\uff0c\u901a\u8fc7 From"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use std::error;\nuse std::fmt;\n\n// Change the alias to use `Box<dyn error::Error>`.\ntype Result<T> = std::result::Result<T, Box<dyn error::Error>>;\n\n#[derive(Debug, Clone)]\nstruct EmptyVec;\n\nimpl fmt::Display for EmptyVec {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, "invalid first item to double")\n    }\n}\n\nimpl error::Error for EmptyVec {}\n\nfn double_first(vec: Vec<&str>) -> Result<i32> {\n    vec.first()\n        .ok_or_else(|| EmptyVec.into()) // Converts to Box\n        .and_then(|s| {\n            s.parse::<i32>()\n                .map_err(|e| e.into()) // Converts to Box\n                .map(|i| 2 * i)\n        })\n}\n\nfn print(result: Result<i32>) {\n    match result {\n        Ok(n) => println!("The first doubled is {}", n),\n        Err(e) => println!("Error: {}", e),\n    }\n}\n\nfn main() {\n    let numbers = vec!["42", "93", "18"];\n    let empty = vec![];\n    let strings = vec!["tofu", "93", "18"];\n\n    print(double_first(numbers));\n    print(double_first(empty));\n    print(double_first(strings));\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-\u7684\u5176\u4ed6\u7528\u9014",children:"? \u7684\u5176\u4ed6\u7528\u9014"}),"\n",(0,t.jsx)(n.p,{children:"\u8bf7\u6ce8\u610f\uff0c\u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5bf9\u8c03\u7528 parse \u7684\u7acb\u5373\u53cd\u5e94\u662f\u5c06 map \u9519\u8bef\u4ece\u5e93\u9519\u8bef\u8f6c\u6362\u4e3a\u76d2\u88c5\u9519\u8bef\uff1a"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:".and_then(|s| s.parse::<i32>())\n    .map_err(|e| e.into())\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u4e14\u5e38\u7528\u7684\u64cd\u4f5c\uff0c\u5982\u679c\u53ef\u4ee5\u7701\u7565\u7684\u8bdd\u4f1a\u5f88\u65b9\u4fbf\u3002\u5509\uff0c\u56e0\u4e3a and_then \u4e0d\u591f\u7075\u6d3b\uff0c\u6240\u4ee5\u4e0d\u80fd\u3002\u4f46\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u6539\u7528 ? \u3002"}),"\n",(0,t.jsx)(n.p,{children:"? \u4e4b\u524d\u88ab\u89e3\u91ca\u4e3a unwrap \u6216 return Err(err) \u3002\u8fd9\u53ea\u662f\u5927\u90e8\u5206\u6b63\u786e\u7684\u3002\u5b83\u5b9e\u9645\u4e0a\u610f\u5473\u7740 unwrap \u6216 return Err(From::from(err)) \u3002\u7531\u4e8e From::from \u662f\u4e0d\u540c\u7c7b\u578b\u4e4b\u95f4\u7684\u8f6c\u6362\u5b9e\u7528\u7a0b\u5e8f\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u60a8 ? \u5c06\u9519\u8bef\u8f6c\u6362\u4e3a\u8fd4\u56de\u7c7b\u578b\uff0c\u5b83\u5c06\u81ea\u52a8\u8f6c\u6362\u3002"}),"\n",(0,t.jsx)(n.p,{children:"\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528 ? \u91cd\u5199\u524d\u9762\u7684\u793a\u4f8b\u3002\u56e0\u6b64\uff0c\u5f53\u4e3a\u6211\u4eec\u7684\u9519\u8bef\u7c7b\u578b\u5b9e\u73b0 From::from \u65f6\uff0c map_err \u5c06\u6d88\u5931\uff1a"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use std::error;\nuse std::fmt;\n\n// Change the alias to use `Box<dyn error::Error>`.\ntype Result<T> = std::result::Result<T, Box<dyn error::Error>>;\n\n#[derive(Debug)]\nstruct EmptyVec;\n\nimpl fmt::Display for EmptyVec {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, "invalid first item to double")\n    }\n}\n\nimpl error::Error for EmptyVec {}\n\n// The same structure as before but rather than chain all `Results`\n// and `Options` along, we `?` to get the inner value out immediately.\nfn double_first(vec: Vec<&str>) -> Result<i32> {\n    let first = vec.first().ok_or(EmptyVec)?;\n    let parsed = first.parse::<i32>()?;\n    Ok(2 * parsed)\n}\n\nfn print(result: Result<i32>) {\n    match result {\n        Ok(n)  => println!("The first doubled is {}", n),\n        Err(e) => println!("Error: {}", e),\n    }\n}\n\nfn main() {\n    let numbers = vec!["42", "93", "18"];\n    let empty = vec![];\n    let strings = vec!["tofu", "93", "18"];\n\n    print(double_first(numbers));\n    print(double_first(empty));\n    print(double_first(strings));\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"\u73b0\u5728\u5b9e\u9645\u4e0a\u5df2\u7ecf\u76f8\u5f53\u5e72\u51c0\u4e86\u3002\u4e0e\u539f\u6765\u7684 panic \u76f8\u6bd4\uff0c\u5b83\u4e0e\u5c06 unwrap \u8c03\u7528\u66ff\u6362\u4e3a ? \u975e\u5e38\u76f8\u4f3c\uff0c\u53ea\u662f\u8fd4\u56de\u7c7b\u578b\u4e3a Result \u3002\u56e0\u6b64\uff0c\u5b83\u4eec\u5fc5\u987b\u5728\u9876\u5c42\u88ab\u89e3\u6784\u3002"}),"\n",(0,t.jsx)(n.h2,{id:"\u6362\u884c\u9519\u8bef",children:"\u6362\u884c\u9519\u8bef"}),"\n",(0,t.jsx)(n.p,{children:"\u88c5\u7bb1\u9519\u8bef\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u5b83\u4eec\u5305\u88c5\u5728\u60a8\u81ea\u5df1\u7684\u9519\u8bef\u7c7b\u578b\u4e2d\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use std::error;\nuse std::error::Error;\nuse std::num::ParseIntError;\nuse std::fmt;\n\ntype Result<T> = std::result::Result<T, DoubleError>;\n\n#[derive(Debug)]\nenum DoubleError {\n    EmptyVec,\n    // We will defer to the parse error implementation for their error.\n    // Supplying extra info requires adding more data to the type.\n    Parse(ParseIntError),\n}\n\nimpl fmt::Display for DoubleError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        match *self {\n            DoubleError::EmptyVec =>\n                write!(f, "please use a vector with at least one element"),\n            // The wrapped error contains additional information and is available\n            // via the source() method.\n            DoubleError::Parse(..) =>\n                write!(f, "the provided string could not be parsed as int"),\n        }\n    }\n}\n\nimpl error::Error for DoubleError {\n    fn source(&self) -> Option<&(dyn error::Error + \'static)> {\n        match *self {\n            DoubleError::EmptyVec => None,\n            // The cause is the underlying implementation error type. Is implicitly\n            // cast to the trait object `&error::Error`. This works because the\n            // underlying type already implements the `Error` trait.\n            DoubleError::Parse(ref e) => Some(e),\n        }\n    }\n}\n\n// Implement the conversion from `ParseIntError` to `DoubleError`.\n// This will be automatically called by `?` if a `ParseIntError`\n// needs to be converted into a `DoubleError`.\nimpl From<ParseIntError> for DoubleError {\n    fn from(err: ParseIntError) -> DoubleError {\n        DoubleError::Parse(err)\n    }\n}\n\nfn double_first(vec: Vec<&str>) -> Result<i32> {\n    let first = vec.first().ok_or(DoubleError::EmptyVec)?;\n    // Here we implicitly use the `ParseIntError` implementation of `From` (which\n    // we defined above) in order to create a `DoubleError`.\n    let parsed = first.parse::<i32>()?;\n\n    Ok(2 * parsed)\n}\n\nfn print(result: Result<i32>) {\n    match result {\n        Ok(n)  => println!("The first doubled is {}", n),\n        Err(e) => {\n            println!("Error: {}", e);\n            if let Some(source) = e.source() {\n                println!("  Caused by: {}", source);\n            }\n        },\n    }\n}\n\nfn main() {\n    let numbers = vec!["42", "93", "18"];\n    let empty = vec![];\n    let strings = vec!["tofu", "93", "18"];\n\n    print(double_first(numbers));\n    print(double_first(empty));\n    print(double_first(strings));\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"\u8fd9\u589e\u52a0\u4e86\u4e00\u4e9b\u7528\u4e8e\u5904\u7406\u9519\u8bef\u7684\u6837\u677f\uff0c\u5e76\u4e14\u53ef\u80fd\u5e76\u975e\u5728\u6240\u6709\u5e94\u7528\u7a0b\u5e8f\u4e2d\u90fd\u9700\u8981\u3002\u6709\u4e00\u4e9b\u5e93\u53ef\u4ee5\u4e3a\u60a8\u5904\u7406\u6837\u677f\u6587\u4ef6\u3002"})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var t=r(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);