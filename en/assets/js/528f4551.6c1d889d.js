"use strict";(self.webpackChunkpanovista=self.webpackChunkpanovista||[]).push([[4487],{15971:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var s=n(74848),c=n(28453);const i={title:"stack",sidebar_position:3,slug:"stack"},r="stack",a={id:"lang/cpp/STL/\u5bb9\u5668/stack",title:"stack",description:"Stacks are a type of container adaptor, specifically designed to operate in a LIFO context (last-in first-out), where elements are inserted and extracted only from one end of the container.",source:"@site/docs/lang/cpp/STL/\u5bb9\u5668/stack.mdx",sourceDirName:"lang/cpp/STL/\u5bb9\u5668",slug:"/lang/cpp/STL/\u5bb9\u5668/stack",permalink:"/en/docs/lang/cpp/STL/\u5bb9\u5668/stack",draft:!1,unlisted:!1,editUrl:"https://github.com/wangenius/wangenius.github.io/tree/master/docs/lang/cpp/STL/\u5bb9\u5668/stack.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"stack",sidebar_position:3,slug:"stack"},sidebar:"cpp",previous:{title:"list",permalink:"/en/docs/lang/cpp/STL/\u5bb9\u5668/list"},next:{title:"queue",permalink:"/en/docs/lang/cpp/STL/\u5bb9\u5668/queue"}},o={},l=[];function d(e){const t={h1:"h1",li:"li",ol:"ol",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"stack",children:"stack"}),"\n",(0,s.jsx)(t.p,{children:"Stacks are a type of container adaptor, specifically designed to operate in a LIFO context (last-in first-out), where elements are inserted and extracted only from one end of the container."}),"\n",(0,s.jsx)(t.p,{children:'stacks are implemented as container adaptors, which are classes that use an encapsulated object of a specific container class as its underlying container, providing a specific set of member functions to access its elements. Elements are pushed/popped from the "back" of the specific container, which is known as the top of the stack.'}),"\n",(0,s.jsx)(t.p,{children:"The underlying container may be any of the standard container class templates or some other specifically designed container class. The container shall support the following operations:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"empty"}),"\n",(0,s.jsx)(t.li,{children:"size"}),"\n",(0,s.jsx)(t.li,{children:"back"}),"\n",(0,s.jsx)(t.li,{children:"push_back"}),"\n",(0,s.jsx)(t.li,{children:"pop_back"}),"\n"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"member function"}),(0,s.jsx)(t.th,{children:"definition"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"(constructor)"}),(0,s.jsx)(t.td,{children:"Construct stack"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"empty"}),(0,s.jsx)(t.td,{children:"Test whether container is empty"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"size"}),(0,s.jsx)(t.td,{children:"Return size"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"top"}),(0,s.jsx)(t.td,{children:"Access next element"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"push"}),(0,s.jsx)(t.td,{children:"Insert element"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"emplace"}),(0,s.jsx)(t.td,{children:"Construct and insert element"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"pop"}),(0,s.jsx)(t.td,{children:"Remove top element"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"swap"}),(0,s.jsx)(t.td,{children:"Swap contents"})]})]})]})]})}function p(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(96540);const c={},i=s.createContext(c);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);