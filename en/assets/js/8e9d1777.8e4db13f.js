"use strict";(self.webpackChunkpanovista=self.webpackChunkpanovista||[]).push([[3563],{1047:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var s=t(4848),i=t(8453);const r={title:"\u57fa\u672c\u6570\u636e\u7c7b\u578b",sidebar_position:1,slug:"\u57fa\u672c\u6570\u636e\u7c7b\u578b"},l="\u57fa\u672c\u6570\u636e\u7c7b\u578b",a={id:"lang/rust/\u6570\u636e\u7c7b\u578b/\u57fa\u672c\u6570\u636e\u7c7b\u578b",title:"\u57fa\u672c\u6570\u636e\u7c7b\u578b",description:"\u6570\u5b57\u6587\u5b57\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u7c7b\u578b\u4f5c\u4e3a\u540e\u7f00\u6765\u8fdb\u884c\u7c7b\u578b\u6ce8\u91ca\u3002\u4f8b\u5982\uff0c\u8981\u6307\u5b9a\u6587\u5b57 42 \u7684\u7c7b\u578b\u5e94\u4e3a i32 \uff0c\u8bf7\u7f16\u5199 42i32 \u3002",source:"@site/docs/lang/rust/\u6570\u636e\u7c7b\u578b/\u57fa\u672c\u6570\u636e\u7c7b\u578b.mdx",sourceDirName:"lang/rust/\u6570\u636e\u7c7b\u578b",slug:"/lang/rust/\u6570\u636e\u7c7b\u578b/\u57fa\u672c\u6570\u636e\u7c7b\u578b",permalink:"/en/docs/lang/rust/\u6570\u636e\u7c7b\u578b/\u57fa\u672c\u6570\u636e\u7c7b\u578b",draft:!1,unlisted:!1,editUrl:"https://github.com/wangenius/wangenius.github.io/tree/master/docs/lang/rust/\u6570\u636e\u7c7b\u578b/\u57fa\u672c\u6570\u636e\u7c7b\u578b.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"\u57fa\u672c\u6570\u636e\u7c7b\u578b",sidebar_position:1,slug:"\u57fa\u672c\u6570\u636e\u7c7b\u578b"},sidebar:"rust",previous:{title:"\u6240\u6709\u6743",permalink:"/en/docs/lang/rust/\u53d8\u91cf\u548c\u58f0\u660e/\u6240\u6709\u6743"},next:{title:"\u590d\u5408\u7c7b\u578b",permalink:"/en/docs/lang/rust/\u6570\u636e\u7c7b\u578b/\u590d\u5408\u7c7b\u578b"}},o={},c=[{value:"\u6574\u578b",id:"\u6574\u578b",level:2},{value:"\u6574\u6570int",id:"\u6574\u6570int",level:3},{value:"\u5e03\u5c14bool",id:"\u5e03\u5c14bool",level:3},{value:"\u6d6e\u70b9float",id:"\u6d6e\u70b9float",level:3},{value:"\u5b57\u7b26char",id:"\u5b57\u7b26char",level:3},{value:"&amp;T",id:"t",level:3},{value:"\u7c7b\u578b\u8f6c\u6362",id:"\u7c7b\u578b\u8f6c\u6362",level:2},{value:"\u7c7b\u578b\u63a8\u65ad",id:"\u7c7b\u578b\u63a8\u65ad",level:2},{value:"aliasing",id:"aliasing",level:2},{value:"\u7c7b\u578b\u8f6c\u6362",id:"\u7c7b\u578b\u8f6c\u6362-1",level:2},{value:"From",id:"from",level:3},{value:"Into",id:"into",level:3},{value:"TryFrom &amp; TryTo",id:"tryfrom--tryto",level:3},{value:"toString",id:"tostring",level:3},{value:"\u89e3\u6790\u5b57\u7b26\u4e32",id:"\u89e3\u6790\u5b57\u7b26\u4e32",level:3}];function u(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"\u57fa\u672c\u6570\u636e\u7c7b\u578b",children:"\u57fa\u672c\u6570\u636e\u7c7b\u578b"}),"\n",(0,s.jsx)(e.p,{children:"\u6570\u5b57\u6587\u5b57\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u7c7b\u578b\u4f5c\u4e3a\u540e\u7f00\u6765\u8fdb\u884c\u7c7b\u578b\u6ce8\u91ca\u3002\u4f8b\u5982\uff0c\u8981\u6307\u5b9a\u6587\u5b57 42 \u7684\u7c7b\u578b\u5e94\u4e3a i32 \uff0c\u8bf7\u7f16\u5199 42i32 \u3002"}),"\n",(0,s.jsx)(e.p,{children:"\u65e0\u540e\u7f00\u6570\u5b57\u6587\u5b57\u7684\u7c7b\u578b\u53d6\u51b3\u4e8e\u5b83\u4eec\u7684\u4f7f\u7528\u65b9\u5f0f\u3002\u5982\u679c\u4e0d\u5b58\u5728\u7ea6\u675f\uff0c\u7f16\u8bd1\u5668\u5c06\u4f7f\u7528 i32 \u8868\u793a\u6574\u6570\uff0c\u4f7f\u7528 f64 \u8868\u793a\u6d6e\u70b9\u6570\u3002"}),"\n",(0,s.jsx)(e.p,{children:"\u524d\u9762\u7684\u4ee3\u7801\u4e2d\u7528\u5230\u4e86\u4e00\u4e9b\u6982\u5ff5\u8fd8\u6ca1\u6709\u89e3\u91ca\uff0c\u8fd9\u91cc\u7ed9\u4e0d\u8010\u70e6\u7684\u8bfb\u8005\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u89e3\u91ca\uff1a"}),"\n",(0,s.jsx)(e.p,{children:"std::mem::size_of_val \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u4f46\u4f7f\u7528\u5176\u5b8c\u6574\u8def\u5f84\u8fdb\u884c\u8c03\u7528\u3002\u4ee3\u7801\u53ef\u4ee5\u5206\u5272\u6210\u79f0\u4e3a\u6a21\u5757\u7684\u903b\u8f91\u5355\u5143\u3002\u5728\u672c\u4f8b\u4e2d\uff0c size_of_val \u51fd\u6570\u5728 mem \u6a21\u5757\u4e2d\u5b9a\u4e49\uff0c mem \u6a21\u5757\u5728 std \u5305\u4e2d\u5b9a\u4e49\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6a21\u5757\u548c crate\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'fn main() {\n    // Suffixed literals, their types are known at initialization\n    let x = 1u8;\n    let y = 2u32;\n    let z = 3f32;\n\n    // Unsuffixed literals, their types depend on how they are used\n    let i = 1;\n    let f = 1.0;\n\n    // `size_of_val` returns the size of a variable in bytes\n    println!("size of `x` in bytes: {}", std::mem::size_of_val(&x));\n    println!("size of `y` in bytes: {}", std::mem::size_of_val(&y));\n    println!("size of `z` in bytes: {}", std::mem::size_of_val(&z));\n    println!("size of `i` in bytes: {}", std::mem::size_of_val(&i));\n    println!("size of `f` in bytes: {}", std::mem::size_of_val(&f));\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"\u6574\u578b",children:"\u6574\u578b"}),"\n",(0,s.jsx)(e.p,{children:"Rust \u6807\u91cf\u7c7b\u578b\u90fd\u662f\u901a\u8fc7\u81ea\u52a8\u62f7\u8d1d\u7684\u65b9\u5f0f\u6765\u8d4b\u503c\u7684\u3002"}),"\n",(0,s.jsx)(e.h3,{id:"\u6574\u6570int",children:"\u6574\u6570int"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Rust",children:"fn main() {\n    let x:i32 = -32;\n    let y:u32 = 45;\n    let z:i64 = -3332;\n    let t:isize = 43;//\u5927\u5c0f\u4e0e\u8ba1\u7b97\u673a\u67b6\u6784\u76f8\u540c\n    let r:usize = 143;//\u5927\u5c0f\u4e0e\u8ba1\u7b97\u673a\u67b6\u6784\u76f8\u540c\n    //\u6574\u5f62\u5b57\u9762\u503c\n    let a = 0xff;\n    let b = 98_22;\n    let c = 0b1111_0000;\n    let d = b'A';//\u8868\u793achar A\u7684Unicode\u7f16\u7801 \u8f93\u51fa\u7528decimal\u8868\u793a\n}\n\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\u5e03\u5c14bool",children:"\u5e03\u5c14bool"}),"\n",(0,s.jsxs)(e.p,{children:["\u6b63\u5982\u5176\u4ed6\u5927\u90e8\u5206\u7f16\u7a0b\u8bed\u8a00\u4e00\u6837\uff0cRust \u4e2d\u7684\u5e03\u5c14\u7c7b\u578b\u6709\u4e24\u4e2a\u53ef\u80fd\u7684\u503c\uff1a",(0,s.jsx)(e.code,{children:"true"})," \u548c ",(0,s.jsx)(e.code,{children:"false"}),"\u3002Rust \u4e2d\u7684\u5e03\u5c14\u7c7b\u578b\u4f7f\u7528 ",(0,s.jsx)(e.code,{children:"bool"})," \u8868\u793a\u3002\u4f8b\u5982\uff1a"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Rust",children:"fn main() {\n    let t = true;\n\n    let f: bool = false; // \u663e\u5f0f\u6307\u5b9a\u7c7b\u578b\u6ce8\u89e3\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\u6d6e\u70b9float",children:"\u6d6e\u70b9float"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Rust",children:"fn main() {\n    let x = 2.0; // f64 \u53cc\u7cbe\u5ea6\n\n    let y: f32 = 3.0; // f32 \u5355\u7cbe\u5ea6\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\u5b57\u7b26char",children:"\u5b57\u7b26char"}),"\n",(0,s.jsxs)(e.p,{children:["\u76ee\u524d\u4e3a\u6b62\u53ea\u4f7f\u7528\u5230\u4e86\u6570\u5b57\uff0c\u4e0d\u8fc7 Rust \u4e5f\u652f\u6301\u5b57\u6bcd\u3002Rust \u7684 ",(0,s.jsx)(e.code,{children:"char"})," \u7c7b\u578b\u662f\u8bed\u8a00\u4e2d\u6700\u539f\u751f\u7684\u5b57\u6bcd\u7c7b\u578b\uff0c\u5982\u4e0b\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u5b83\u3002\uff08\u6ce8\u610f ",(0,s.jsx)(e.code,{children:"char"})," \u7531\u5355\u5f15\u53f7\u6307\u5b9a\uff0c\u4e0d\u540c\u4e8e\u5b57\u7b26\u4e32\u4f7f\u7528\u53cc\u5f15\u53f7\u3002\uff09"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Rust",children:"fn main() {\n    let c = 'z';\n    let z = '\u2124';\n    let heart_eyed_cat = '\ud83d\ude3b';\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Rust \u7684 ",(0,s.jsx)(e.code,{children:"char"})," \u7c7b\u578b\u7684\u5927\u5c0f\u4e3a\u56db\u4e2a\u5b57\u8282(four bytes)\uff0c\u5e76\u4ee3\u8868\u4e86\u4e00\u4e2a Unicode \u6807\u91cf\u503c\uff08Unicode Scalar Value\uff09\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u6bd4 ASCII \u8868\u793a\u66f4\u591a\u5185\u5bb9\u3002\u5728 Rust \u4e2d\uff0c\u62fc\u97f3\u5b57\u6bcd\uff08Accented letters\uff09\uff0c\u4e2d\u6587\u3001\u65e5\u6587\u3001\u97e9\u6587\u7b49\u5b57\u7b26\uff0cemoji\uff08\u7ed8\u6587\u5b57\uff09\u4ee5\u53ca\u96f6\u957f\u5ea6\u7684\u7a7a\u767d\u5b57\u7b26\u90fd\u662f\u6709\u6548\u7684 ",(0,s.jsx)(e.code,{children:"char"})," \u503c\u3002Unicode \u6807\u91cf\u503c\u5305\u542b\u4ece ",(0,s.jsx)(e.code,{children:"U+0000"})," \u5230 ",(0,s.jsx)(e.code,{children:"U+D7FF"})," \u548c ",(0,s.jsx)(e.code,{children:"U+E000"})," \u5230 ",(0,s.jsx)(e.code,{children:"U+10FFFF"})," \u5728\u5185\u7684\u503c\u3002\u4e0d\u8fc7\uff0c\u201c\u5b57\u7b26\u201d \u5e76\u4e0d\u662f\u4e00\u4e2a Unicode \u4e2d\u7684\u6982\u5ff5\uff0c\u6240\u4ee5\u4eba\u76f4\u89c9\u4e0a\u7684 \u201c\u5b57\u7b26\u201d \u53ef\u80fd\u4e0e Rust \u4e2d\u7684 ",(0,s.jsx)(e.code,{children:"char"})," \u5e76\u4e0d\u7b26\u5408\u3002"]}),"\n",(0,s.jsx)(e.h3,{id:"t",children:"&T"}),"\n",(0,s.jsx)(e.p,{children:"\u6bd4\u5982&str\uff0c&[T]\u7b49"}),"\n",(0,s.jsx)(e.h2,{id:"\u7c7b\u578b\u8f6c\u6362",children:"\u7c7b\u578b\u8f6c\u6362"}),"\n",(0,s.jsx)(e.p,{children:"Rust \u63d0\u4f9b\u4e86\u591a\u79cd\u673a\u5236\u6765\u66f4\u6539\u6216\u5b9a\u4e49\u539f\u59cb\u7c7b\u578b\u548c\u7528\u6237\u5b9a\u4e49\u7c7b\u578b\u3002\u4ee5\u4e0b\u90e8\u5206\u6db5\u76d6\uff1a"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u539f\u59cb\u7c7b\u578b\u4e4b\u95f4\u7684\u8f6c\u6362"}),"\n",(0,s.jsx)(e.li,{children:"\u6307\u5b9a\u6240\u9700\u7684\u6587\u5b57\u7c7b\u578b"}),"\n",(0,s.jsx)(e.li,{children:"\u4f7f\u7528\u7c7b\u578b\u63a8\u65ad"}),"\n",(0,s.jsx)(e.li,{children:"\u522b\u540d\u7c7b\u578b"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Rust \u4e0d\u63d0\u4f9b\u539f\u59cb\u7c7b\u578b\u4e4b\u95f4\u7684\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\uff08\u5f3a\u5236\uff09\u3002\u4f46\u662f\uff0c\u53ef\u4ee5\u4f7f\u7528 as \u5173\u952e\u5b57\u6267\u884c\u663e\u5f0f\u7c7b\u578b\u8f6c\u6362\uff08\u5f3a\u5236\u8f6c\u6362\uff09\u3002"}),"\n",(0,s.jsx)(e.p,{children:"\u6574\u6570\u7c7b\u578b\u4e4b\u95f4\u7684\u8f6c\u6362\u89c4\u5219\u901a\u5e38\u9075\u5faa C \u7ea6\u5b9a\uff0c\u9664\u975e C \u5177\u6709\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\u3002 Rust \u4e2d\u660e\u786e\u5b9a\u4e49\u4e86\u6574\u578b\u7c7b\u578b\u4e4b\u95f4\u6240\u6709\u5f3a\u5236\u8f6c\u6362\u7684\u884c\u4e3a\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'// Suppress all warnings from casts which overflow.\n#![allow(overflowing_literals)]\n\nfn main() {\n  let decimal = 65.4321_f32;\n\n  // Error! No implicit conversion\n  let integer: u8 = decimal;\n  // FIXME ^ Comment out this line\n\n  // Explicit conversion\n  let integer = decimal as u8;\n  let character = integer as char;\n\n  // Error! There are limitations in conversion rules.\n  // A float cannot be directly converted to a char.\n  let character = decimal as char;\n  // FIXME ^ Comment out this line\n\n  println!("Casting: {} -> {} -> {}", decimal, integer, character);\n\n  // when casting any value to an unsigned type, T,\n  // T::MAX + 1 is added or subtracted until the value\n  // fits into the new type\n\n  // 1000 already fits in a u16\n  println!("1000 as a u16 is: {}", 1000 as u16);\n\n  // 1000 - 256 - 256 - 256 = 232\n  // Under the hood, the first 8 least significant bits (LSB) are kept,\n  // while the rest towards the most significant bit (MSB) get truncated.\n  println!("1000 as a u8 is : {}", 1000 as u8);\n  // -1 + 256 = 255\n  println!("  -1 as a u8 is : {}", (-1i8) as u8);\n\n  // For positive numbers, this is the same as the modulus\n  println!("1000 mod 256 is : {}", 1000 % 256);\n\n  // When casting to a signed type, the (bitwise) result is the same as\n  // first casting to the corresponding unsigned type. If the most significant\n  // bit of that value is 1, then the value is negative.\n\n  // Unless it already fits, of course.\n  println!(" 128 as a i16 is: {}", 128 as i16);\n\n  // In boundary case 128 value in 8-bit two\'s complement representation is -128\n  println!(" 128 as a i8 is : {}", 128 as i8);\n\n  // repeating the example above\n  // 1000 as u8 -> 232\n  println!("1000 as a u8 is : {}", 1000 as u8);\n  // and the value of 232 in 8-bit two\'s complement representation is -24\n  println!(" 232 as a i8 is : {}", 232 as i8);\n\n  // Since Rust 1.45, the `as` keyword performs a *saturating cast*\n  // when casting from float to int. If the floating point value exceeds\n  // the upper bound or is less than the lower bound, the returned value\n  // will be equal to the bound crossed.\n\n  // 300.0 as u8 is 255\n  println!(" 300.0 as u8 is : {}", 300.0_f32 as u8);\n  // -100.0 as u8 is 0\n  println!("-100.0 as u8 is : {}", -100.0_f32 as u8);\n  // nan as u8 is 0\n  println!("   nan as u8 is : {}", f32::NAN as u8);\n\n  // This behavior incurs a small runtime cost and can be avoided\n  // with unsafe methods, however the results might overflow and\n  // return **unsound values**. Use these methods wisely:\n  unsafe {\n      // 300.0 as u8 is 44\n      println!(" 300.0 as u8 is : {}", 300.0_f32.to_int_unchecked::<u8>());\n      // -100.0 as u8 is 156\n      println!("-100.0 as u8 is : {}", (-100.0_f32).to_int_unchecked::<u8>());\n      // nan as u8 is 0\n      println!("   nan as u8 is : {}", f32::NAN.to_int_unchecked::<u8>());\n  }\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"\u7c7b\u578b\u63a8\u65ad",children:"\u7c7b\u578b\u63a8\u65ad"}),"\n",(0,s.jsx)(e.p,{children:"\u7c7b\u578b\u63a8\u65ad\u5f15\u64ce\u975e\u5e38\u667a\u80fd\u3002\u5b83\u4e0d\u4ec5\u4ec5\u5728\u521d\u59cb\u5316\u671f\u95f4\u67e5\u770b\u503c\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u3002\u5b83\u8fd8\u7814\u7a76\u4e86\u4e4b\u540e\u5982\u4f55\u4f7f\u7528\u53d8\u91cf\u6765\u63a8\u65ad\u5176\u7c7b\u578b\u3002\u8fd9\u662f\u7c7b\u578b\u63a8\u65ad\u7684\u9ad8\u7ea7\u793a\u4f8b\uff1a"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:"fn main() {\n    // Because of the annotation, the compiler knows that `elem` has type u8.\n    let elem = 5u8;\n\n    // Create an empty vector (a growable array).\n    let mut vec = Vec::new();\n    // At this point the compiler doesn't know the exact type of `vec`, it\n    // just knows that it's a vector of something (`Vec<_>`).\n\n    // Insert `elem` in the vector.\n    vec.push(elem);\n    // Aha! Now the compiler knows that `vec` is a vector of `u8`s (`Vec<u8>`)\n    // TODO ^ Try commenting out the `vec.push(elem)` line\n\n    println!(\"{:?}\", vec);\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"\u4e0d\u9700\u8981\u53d8\u91cf\u7684\u7c7b\u578b\u6ce8\u91ca"}),"\n",(0,s.jsx)(e.h2,{id:"aliasing",children:"aliasing"}),"\n",(0,s.jsx)(e.p,{children:"type \u8bed\u53e5\u53ef\u7528\u4e8e\u4e3a\u73b0\u6709\u7c7b\u578b\u6307\u5b9a\u65b0\u540d\u79f0\u3002\u7c7b\u578b\u5fc5\u987b\u5177\u6709 UpperCamelCase \u540d\u79f0\uff0c\u5426\u5219\u7f16\u8bd1\u5668\u5c06\u53d1\u51fa\u8b66\u544a\u3002\u6b64\u89c4\u5219\u7684\u4f8b\u5916\u662f\u539f\u59cb\u7c7b\u578b\uff1a usize \u3001 f32 \u7b49\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'// `NanoSecond`, `Inch`, and `U64` are new names for `u64`.\ntype NanoSecond = u64;\ntype Inch = u64;\ntype U64 = u64;\n\nfn main() {\n    // `NanoSecond` = `Inch` = `U64` = `u64`.\n    let nanoseconds: NanoSecond = 5 as u64;\n    let inches: Inch = 2 as U64;\n\n    // Note that type aliases *don\'t* provide any extra type safety, because\n    // aliases are *not* new types\n    println!("{} nanoseconds + {} inches = {} unit?",\n             nanoseconds,\n             inches,\n             nanoseconds + inches);\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["\u522b\u540d\u7684\u4e3b\u8981\u7528\u9014\u662f\u51cf\u5c11\u6837\u677f\u4ee3\u7801\uff1b\u4f8b\u5982 ",(0,s.jsx)(e.code,{children:"io::Result<T>"})," \u7c7b\u578b\u662f ",(0,s.jsx)(e.code,{children:"Result<T, io::Error>"})," \u7c7b\u578b\u7684\u522b\u540d\u3002"]}),"\n",(0,s.jsx)(e.p,{children:"Rust \u901a\u8fc7\u4f7f\u7528\u7279\u5f81\u6765\u89e3\u51b3\u81ea\u5b9a\u4e49\u7c7b\u578b\uff08\u5373 struct \u548c enum \uff09\u4e4b\u95f4\u7684\u8f6c\u6362\u3002\u901a\u7528\u8f6c\u6362\u5c06\u4f7f\u7528 From \u548c Into \u7279\u5f81\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u66f4\u5e38\u89c1\u7684\u60c5\u51b5\uff0c\u6709\u66f4\u5177\u4f53\u7684\u65b9\u6cd5\uff0c\u7279\u522b\u662f\u5728 String \u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u65f6\u3002"}),"\n",(0,s.jsx)(e.h2,{id:"\u7c7b\u578b\u8f6c\u6362-1",children:"\u7c7b\u578b\u8f6c\u6362"}),"\n",(0,s.jsx)(e.p,{children:"\u539f\u59cb\u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7\u5f3a\u5236\u8f6c\u6362\u76f8\u4e92\u8f6c\u6362\u3002"}),"\n",(0,s.jsx)(e.p,{children:"Rust \u901a\u8fc7\u4f7f\u7528\u7279\u5f81\u6765\u89e3\u51b3\u81ea\u5b9a\u4e49\u7c7b\u578b\uff08\u5373 struct \u548c enum \uff09\u4e4b\u95f4\u7684\u8f6c\u6362\u3002\u901a\u7528\u8f6c\u6362\u5c06\u4f7f\u7528 From \u548c Into \u7279\u5f81\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u66f4\u5e38\u89c1\u7684\u60c5\u51b5\uff0c\u6709\u66f4\u5177\u4f53\u7684\u65b9\u6cd5\uff0c\u7279\u522b\u662f\u5728 String \u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u65f6\u3002"}),"\n",(0,s.jsx)(e.h3,{id:"from",children:"From"}),"\n",(0,s.jsx)(e.p,{children:"From \u7279\u5f81\u5141\u8bb8\u7c7b\u578b\u5b9a\u4e49\u5982\u4f55\u4ece\u53e6\u4e00\u79cd\u7c7b\u578b\u521b\u5efa\u81ea\u8eab\uff0c\u4ece\u800c\u63d0\u4f9b\u4e86\u4e00\u79cd\u975e\u5e38\u7b80\u5355\u7684\u673a\u5236\u6765\u5728\u591a\u79cd\u7c7b\u578b\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002\u6807\u51c6\u5e93\u4e2d\u6709\u8bb8\u591a\u6b64\u7279\u5f81\u7684\u5b9e\u73b0\uff0c\u7528\u4e8e\u539f\u59cb\u7c7b\u578b\u548c\u5e38\u89c1\u7c7b\u578b\u7684\u8f6c\u6362\u3002"}),"\n",(0,s.jsx)(e.p,{children:"\u4f8b\u5982\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06 str \u8f6c\u6362\u4e3a String"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'let my_str = "hello";\nlet my_string = String::from(my_str);\n'})}),"\n",(0,s.jsx)(e.p,{children:"\u6211\u4eec\u53ef\u4ee5\u505a\u7c7b\u4f3c\u7684\u4e8b\u60c5\u6765\u5b9a\u4e49\u6211\u4eec\u81ea\u5df1\u7684\u7c7b\u578b\u7684\u8f6c\u6362\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'use std::convert::From;\n\n#[derive(Debug)]\nstruct Number {\n    value: i32,\n}\n\nimpl From<i32> for Number {\n    fn from(item: i32) -> Self {\n        Number { value: item }\n    }\n}\n\nfn main() {\n    let num = Number::from(30);\n    println!("My number is {:?}", num);\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"into",children:"Into"}),"\n",(0,s.jsx)(e.p,{children:"Into \u7279\u5f81\u53ea\u662f From \u7279\u5f81\u7684\u5012\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u60a8\u5df2\u7ecf\u4e3a\u60a8\u7684\u7c7b\u578b\u5b9e\u73b0\u4e86 From \u7279\u5f81\uff0c Into \u5c06\u5728\u5fc5\u8981\u65f6\u8c03\u7528\u5b83\u3002"}),"\n",(0,s.jsx)(e.p,{children:"\u4f7f\u7528 Into \u7279\u5f81\u901a\u5e38\u9700\u8981\u6307\u5b9a\u8981\u8f6c\u6362\u7684\u7c7b\u578b\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u5927\u591a\u6570\u65f6\u5019\u65e0\u6cd5\u786e\u5b9a\u8fd9\u4e00\u70b9\u3002\u7136\u800c\uff0c\u8003\u8651\u5230\u6211\u4eec\u514d\u8d39\u83b7\u5f97\u8be5\u529f\u80fd\uff0c\u8fd9\u662f\u4e00\u4e2a\u5c0f\u5c0f\u7684\u6743\u8861\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'use std::convert::Into;\n\n#[derive(Debug)]\nstruct Number {\n    value: i32,\n}\n\nimpl Into<Number> for i32 {\n    fn into(self) -> Number {\n        Number { value: self }\n    }\n}\n\nfn main() {\n    let int = 5;\n    // Try removing the type annotation\n    let num: Number = int.into();\n    println!("My number is {:?}", num);\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"tryfrom--tryto",children:"TryFrom & TryTo"}),"\n",(0,s.jsx)(e.p,{children:"\u4e0e From \u548c Into \u7c7b\u4f3c\uff0c TryFrom \u548c TryInto \u662f\u7528\u4e8e\u5728\u7c7b\u578b\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u7684\u901a\u7528\u7279\u5f81\u3002\u4e0e From / Into \u4e0d\u540c\uff0c TryFrom / TryInto \u7279\u5f81\u7528\u4e8e\u6613\u51fa\u9519\u7684\u8f6c\u6362\uff0c\u56e0\u6b64\u8fd4\u56de Result"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:"use std::convert::TryFrom;\nuse std::convert::TryInto;\n\n#[derive(Debug, PartialEq)]\nstruct EvenNumber(i32);\n\nimpl TryFrom<i32> for EvenNumber {\n    type Error = ();\n\n    fn try_from(value: i32) -> Result<Self, Self::Error> {\n        if value % 2 == 0 {\n            Ok(EvenNumber(value))\n        } else {\n            Err(())\n        }\n    }\n}\n\nfn main() {\n    // TryFrom\n\n    assert_eq!(EvenNumber::try_from(8), Ok(EvenNumber(8)));\n    assert_eq!(EvenNumber::try_from(5), Err(()));\n\n    // TryInto\n\n    let result: Result<EvenNumber, ()> = 8i32.try_into();\n    assert_eq!(result, Ok(EvenNumber(8)));\n    let result: Result<EvenNumber, ()> = 5i32.try_into();\n    assert_eq!(result, Err(()));\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"tostring",children:"toString"}),"\n",(0,s.jsx)(e.p,{children:"\u5c06\u4efb\u4f55\u7c7b\u578b\u8f6c\u6362\u4e3a String \u5c31\u50cf\u5b9e\u73b0\u8be5\u7c7b\u578b\u7684 ToString \u7279\u5f81\u4e00\u6837\u7b80\u5355\u3002\u60a8\u5e94\u8be5\u5b9e\u73b0 fmt::Display \u7279\u5f81\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u8fd9\u6837\u505a\uff0c\u5b83\u4f1a\u81ea\u52a8\u63d0\u4f9b ToString \uff0c\u5e76\u4e14\u8fd8\u5141\u8bb8\u6253\u5370 print! \u90e8\u5206\u4e2d\u8ba8\u8bba\u7684\u7c7b\u578b\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'use std::fmt;\n\nstruct Circle {\n    radius: i32\n}\n\nimpl fmt::Display for Circle {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, "Circle of radius {}", self.radius)\n    }\n}\n\nfn main() {\n    let circle = Circle { radius: 6 };\n    println!("{}", circle.to_string());\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\u89e3\u6790\u5b57\u7b26\u4e32",children:"\u89e3\u6790\u5b57\u7b26\u4e32"}),"\n",(0,s.jsx)(e.p,{children:"\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u591a\u79cd\u7c7b\u578b\u5f88\u6709\u7528\uff0c\u4f46\u66f4\u5e38\u89c1\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u4e4b\u4e00\u662f\u5c06\u5b83\u4eec\u4ece\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\u3002\u60ef\u7528\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 parse \u51fd\u6570\uff0c\u5e76\u5b89\u6392\u7c7b\u578b\u63a8\u65ad\u6216\u4f7f\u7528\u201cturbofish\u201d\u8bed\u6cd5\u6307\u5b9a\u8981\u89e3\u6790\u7684\u7c7b\u578b\u3002\u4ee5\u4e0b\u793a\u4f8b\u663e\u793a\u4e86\u4e24\u79cd\u66ff\u4ee3\u65b9\u6848\u3002"}),"\n",(0,s.jsx)(e.p,{children:"\u53ea\u8981\u4e3a\u8be5\u7c7b\u578b\u5b9e\u73b0\u4e86 FromStr \u7279\u5f81\uff0c\u5c31\u4f1a\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b\u3002\u6807\u51c6\u5e93\u4e2d\u7684\u8bb8\u591a\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u8fd9\u4e00\u70b9\u3002\u8981\u5728\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\u4e0a\u83b7\u5f97\u6b64\u529f\u80fd\uff0c\u53ea\u9700\u5b9e\u73b0\u8be5\u7c7b\u578b\u7684 FromStr \u7279\u5f81\u5373\u53ef\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'fn main() {\n    let parsed: i32 = "5".parse().unwrap();\n    let turbo_parsed = "10".parse::<i32>().unwrap();\n\n    let sum = parsed + turbo_parsed;\n    println!("Sum: {:?}", sum);\n}\n'})})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(u,{...n})}):u(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>l,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function l(n){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:l(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);