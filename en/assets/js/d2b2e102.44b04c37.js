"use strict";(self.webpackChunkpanovista=self.webpackChunkpanovista||[]).push([[7105],{6445:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var t=o(4848),i=o(8453);const r={title:"option&unwrap",sidebar_position:3,slug:"option&unwrap"},a="option&unwrap",l={id:"lang/rust/\u9519\u8bef\u5904\u7406/option&unwrap",title:"option&unwrap",description:"\u5728\u4e0a\u4e00\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u6211\u4eec\u53ef\u4ee5\u968f\u610f\u5f15\u53d1\u7a0b\u5e8f\u5931\u8d25\u3002\u5982\u679c\u6211\u4eec\u559d\u542b\u7cd6\u67e0\u6aac\u6c34\uff0c\u6211\u4eec\u4f1a\u544a\u8bc9\u7a0b\u5e8f panic \u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u559d\u70b9\u996e\u6599\u4f46\u6ca1\u6709\u6536\u5230\u600e\u4e48\u529e\uff1f\u8fd9\u79cd\u60c5\u51b5\u540c\u6837\u7cdf\u7cd5\uff0c\u6240\u4ee5\u5fc5\u987b\u5904\u7406\uff01",source:"@site/docs/lang/rust/\u9519\u8bef\u5904\u7406/option&unwrap.mdx",sourceDirName:"lang/rust/\u9519\u8bef\u5904\u7406",slug:"/lang/rust/\u9519\u8bef\u5904\u7406/option&unwrap",permalink:"/en/docs/lang/rust/\u9519\u8bef\u5904\u7406/option&unwrap",draft:!1,unlisted:!1,editUrl:"https://github.com/wangenius/wangenius.github.io/tree/master/docs/lang/rust/\u9519\u8bef\u5904\u7406/option&unwrap.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"option&unwrap",sidebar_position:3,slug:"option&unwrap"},sidebar:"rust",previous:{title:"abort&unwind",permalink:"/en/docs/lang/rust/\u9519\u8bef\u5904\u7406/abort&unwind"},next:{title:"Result",permalink:"/en/docs/lang/rust/\u9519\u8bef\u5904\u7406/Result"}},s={},d=[{value:"\u4f7f\u7528 ? \u89e3\u538b\u9009\u9879",id:"\u4f7f\u7528--\u89e3\u538b\u9009\u9879",level:2},{value:"\u7ec4\u5408\u7b26\uff1a map",id:"\u7ec4\u5408\u7b26-map",level:2},{value:"\u7ec4\u5408\u7b26\uff1a and_then",id:"\u7ec4\u5408\u7b26-and_then",level:2},{value:"\u89e3\u538b\u9009\u9879\u548c\u9ed8\u8ba4\u503c Defaults: or, or_else, get_or_insert, get_or_insert_with",id:"\u89e3\u538b\u9009\u9879\u548c\u9ed8\u8ba4\u503c-defaults-or-or_else-get_or_insert-get_or_insert_with",level:2},{value:"or() \u53ef\u94fe\u63a5\uff0c\u6025\u5207\u6c42\u503c\uff0c\u4fdd\u6301\u7a7a\u503c\u5b8c\u6574",id:"or-\u53ef\u94fe\u63a5\u6025\u5207\u6c42\u503c\u4fdd\u6301\u7a7a\u503c\u5b8c\u6574",level:3},{value:"or_else() \u53ef\u94fe\u63a5\uff0c\u5ef6\u8fdf\u8ba1\u7b97\uff0c\u4fdd\u6301\u7a7a\u503c\u5b8c\u6574",id:"or_else-\u53ef\u94fe\u63a5\u5ef6\u8fdf\u8ba1\u7b97\u4fdd\u6301\u7a7a\u503c\u5b8c\u6574",level:3},{value:"get_or_insert() \u6025\u5207\u5730\u6c42\u503c\uff0c\u5c31\u5730\u4fee\u6539\u7a7a\u503c",id:"get_or_insert-\u6025\u5207\u5730\u6c42\u503c\u5c31\u5730\u4fee\u6539\u7a7a\u503c",level:2},{value:"get_or_insert_with() \u5ef6\u8fdf\u8ba1\u7b97\uff0c\u5c31\u5730\u4fee\u6539\u7a7a\u503c",id:"get_or_insert_with-\u5ef6\u8fdf\u8ba1\u7b97\u5c31\u5730\u4fee\u6539\u7a7a\u503c",level:3}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"optionunwrap",children:"option&unwrap"}),"\n",(0,t.jsx)(n.p,{children:"\u5728\u4e0a\u4e00\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u6211\u4eec\u53ef\u4ee5\u968f\u610f\u5f15\u53d1\u7a0b\u5e8f\u5931\u8d25\u3002\u5982\u679c\u6211\u4eec\u559d\u542b\u7cd6\u67e0\u6aac\u6c34\uff0c\u6211\u4eec\u4f1a\u544a\u8bc9\u7a0b\u5e8f panic \u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u559d\u70b9\u996e\u6599\u4f46\u6ca1\u6709\u6536\u5230\u600e\u4e48\u529e\uff1f\u8fd9\u79cd\u60c5\u51b5\u540c\u6837\u7cdf\u7cd5\uff0c\u6240\u4ee5\u5fc5\u987b\u5904\u7406\uff01"}),"\n",(0,t.jsx)(n.p,{children:'\u6211\u4eec\u53ef\u4ee5\u50cf\u6d4b\u8bd5\u67e0\u6aac\u6c34\u4e00\u6837\u9488\u5bf9\u7a7a\u5b57\u7b26\u4e32 ( "" ) \u8fdb\u884c\u6d4b\u8bd5\u3002\u7531\u4e8e\u6211\u4eec\u4f7f\u7528 Rust\uff0c\u6240\u4ee5\u8ba9\u7f16\u8bd1\u5668\u6307\u51fa\u6ca1\u6709\u996e\u6599\u7684\u60c5\u51b5\u3002'}),"\n",(0,t.jsxs)(n.p,{children:["\u5f53\u53ef\u80fd\u7f3a\u5e2d\u65f6\uff0c\u4f7f\u7528 std \u5e93\u4e2d\u540d\u4e3a ",(0,t.jsx)(n.code,{children:"Option<T>"})," \u7684 ",(0,t.jsx)(n.code,{children:"enum"})," \u3002\u5b83\u8868\u73b0\u4e3a\u4e24\u4e2a\u201c\u9009\u9879\u201d\u4e4b\u4e00\uff1a"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Some(T) \uff1a\u627e\u5230 T \u7c7b\u578b\u7684\u5143\u7d20"}),"\n",(0,t.jsx)(n.li,{children:"None \uff1a\u672a\u627e\u5230\u5143\u7d20"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"\u8fd9\u4e9b\u60c5\u51b5\u53ef\u4ee5\u901a\u8fc7 match \u663e\u5f0f\u5904\u7406\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 unwrap \u9690\u5f0f\u5904\u7406\u3002\u9690\u5f0f\u5904\u7406\u5c06\u8fd4\u56de\u5185\u90e8\u5143\u7d20\u6216 panic \u3002"}),"\n",(0,t.jsx)(n.p,{children:"\u8bf7\u6ce8\u610f\uff0c\u53ef\u4ee5\u4f7f\u7528expect\u624b\u52a8\u81ea\u5b9a\u4e49 panic \uff0c\u4f46\u662f unwrap \u5426\u5219\u4f1a\u7ed9\u6211\u4eec\u7559\u4e0b\u6bd4\u663e\u5f0f\u5904\u7406\u66f4\u6709\u610f\u4e49\u7684\u8f93\u51fa\u3002\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u663e\u5f0f\u5904\u7406\u4f1a\u4ea7\u751f\u66f4\u53d7\u63a7\u5236\u7684\u7ed3\u679c\uff0c\u540c\u65f6\u4fdd\u7559 panic \u9009\u9879\uff08\u5982\u679c\u9700\u8981\uff09\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'// The adult has seen it all, and can handle any drink well.\n// All drinks are handled explicitly using `match`.\nfn give_adult(drink: Option<&str>) {\n    // Specify a course of action for each case.\n    match drink {\n        Some("lemonade") => println!("Yuck! Too sugary."),\n        Some(inner)   => println!("{}? How nice.", inner),\n        None          => println!("No drink? Oh well."),\n    }\n}\n\n// Others will `panic` before drinking sugary drinks.\n// All drinks are handled implicitly using `unwrap`.\nfn drink(drink: Option<&str>) {\n    // `unwrap` returns a `panic` when it receives a `None`.\n    let inside = drink.unwrap();\n    if inside == "lemonade" { panic!("AAAaaaaa!!!!"); }\n\n    println!("I love {}s!!!!!", inside);\n}\n\nfn main() {\n    let water  = Some("water");\n    let lemonade = Some("lemonade");\n    let void  = None;\n\n    give_adult(water);\n    give_adult(lemonade);\n    give_adult(void);\n\n    let coffee = Some("coffee");\n    let nothing = None;\n\n    drink(coffee);\n    drink(nothing);\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"\u4f7f\u7528--\u89e3\u538b\u9009\u9879",children:"\u4f7f\u7528 ? \u89e3\u538b\u9009\u9879"}),"\n",(0,t.jsx)(n.p,{children:"\u60a8\u53ef\u4ee5\u4f7f\u7528 match \u8bed\u53e5\u6765\u89e3\u538b Option \uff0c\u4f46\u4f7f\u7528 ? \u8fd0\u7b97\u7b26\u901a\u5e38\u66f4\u5bb9\u6613\u3002\u5982\u679c x \u662f Option \uff0c\u90a3\u4e48\u5982\u679c x \u662f Some \uff0c\u5219\u8bc4\u4f30 x? \u5c06\u8fd4\u56de\u57fa\u7840\u503c\uff0c\u5426\u5219\u5b83\u5c06\u7ec8\u6b62\u6b63\u5728\u6267\u884c\u7684\u4efb\u4f55\u51fd\u6570\u5e76\u8fd4\u56de None \u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'fn next_birthday(current_age: Option<u8>) -> Option<String> {\n\t// If `current_age` is `None`, this returns `None`.\n\t// If `current_age` is `Some`, the inner `u8` value + 1\n    // gets assigned to `next_age`\n    let next_age: u8 = current_age? + 1;\n    Some(format!("Next year I will be {}", next_age))\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"\u60a8\u53ef\u4ee5\u5c06\u591a\u4e2a ? \u94fe\u63a5\u5728\u4e00\u8d77\u4ee5\u4f7f\u4ee3\u7801\u66f4\u5177\u53ef\u8bfb\u6027\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"struct Person {\n    job: Option<Job>,\n}\n\n#[derive(Clone, Copy)]\nstruct Job {\n    phone_number: Option<PhoneNumber>,\n}\n\n#[derive(Clone, Copy)]\nstruct PhoneNumber {\n    area_code: Option<u8>,\n    number: u32,\n}\n\nimpl Person {\n\n    // Gets the area code of the phone number of the person's job, if it exists.\n    fn work_phone_area_code(&self) -> Option<u8> {\n        // This would need many nested `match` statements without the `?` operator.\n        // It would take a lot more code - try writing it yourself and see which\n        // is easier.\n        self.job?.phone_number?.area_code\n    }\n}\n\nfn main() {\n    let p = Person {\n        job: Some(Job {\n            phone_number: Some(PhoneNumber {\n                area_code: Some(61),\n                number: 439222222,\n            }),\n        }),\n    };\n\n    assert_eq!(p.work_phone_area_code(), Some(61));\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u7ec4\u5408\u7b26-map",children:"\u7ec4\u5408\u7b26\uff1a map"}),"\n",(0,t.jsx)(n.p,{children:"match \u662f\u5904\u7406 Option \u7684\u6709\u6548\u65b9\u6cd5\u3002\u4f46\u662f\uff0c\u60a8\u6700\u7ec8\u53ef\u80fd\u4f1a\u53d1\u73b0\u5927\u91cf\u4f7f\u7528\u5f88\u4e4f\u5473\uff0c\u5c24\u5176\u662f\u4ec5\u5bf9\u8f93\u5165\u6709\u6548\u7684\u64cd\u4f5c\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7ec4\u5408\u5668\u53ef\u7528\u4e8e\u4ee5\u6a21\u5757\u5316\u65b9\u5f0f\u7ba1\u7406\u63a7\u5236\u6d41\u3002"}),"\n",(0,t.jsx)(n.p,{children:"Option \u6709\u4e00\u4e2a\u540d\u4e3a map() \u7684\u5185\u7f6e\u65b9\u6cd5\uff0c\u5b83\u662f Some -> Some \u548c None -> None \u7b80\u5355\u6620\u5c04\u7684\u7ec4\u5408\u5668\u3002\u591a\u4e2a map() \u8c03\u7528\u53ef\u4ee5\u94fe\u63a5\u5728\u4e00\u8d77\u4ee5\u83b7\u5f97\u66f4\u5927\u7684\u7075\u6d3b\u6027\u3002"}),"\n",(0,t.jsx)(n.p,{children:"\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c process() \u66ff\u6362\u5176\u4e4b\u524d\u7684\u6240\u6709\u51fd\u6570\uff0c\u540c\u65f6\u4fdd\u6301\u7d27\u51d1\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"#![allow(dead_code)]\n\n#[derive(Debug)] enum Food { Apple, Carrot, Potato }\n\n#[derive(Debug)] struct Peeled(Food);\n#[derive(Debug)] struct Chopped(Food);\n#[derive(Debug)] struct Cooked(Food);\n\n// Peeling food. If there isn't any, then return `None`.\n// Otherwise, return the peeled food.\nfn peel(food: Option<Food>) -> Option<Peeled> {\n    match food {\n        Some(food) => Some(Peeled(food)),\n        None       => None,\n    }\n}\n\n// Chopping food. If there isn't any, then return `None`.\n// Otherwise, return the chopped food.\nfn chop(peeled: Option<Peeled>) -> Option<Chopped> {\n    match peeled {\n        Some(Peeled(food)) => Some(Chopped(food)),\n        None               => None,\n    }\n}\n\n// Cooking food. Here, we showcase `map()` instead of `match` for case handling.\nfn cook(chopped: Option<Chopped>) -> Option<Cooked> {\n    chopped.map(|Chopped(food)| Cooked(food))\n}\n\n// A function to peel, chop, and cook food all in sequence.\n// We chain multiple uses of `map()` to simplify the code.\nfn process(food: Option<Food>) -> Option<Cooked> {\n    food.map(|f| Peeled(f))\n        .map(|Peeled(f)| Chopped(f))\n        .map(|Chopped(f)| Cooked(f))\n}\n\n// Check whether there's food or not before trying to eat it!\nfn eat(food: Option<Cooked>) {\n    match food {\n        Some(food) => println!(\"Mmm. I love {:?}\", food),\n        None       => println!(\"Oh no! It wasn't edible.\"),\n    }\n}\n\nfn main() {\n    let apple = Some(Food::Apple);\n    let carrot = Some(Food::Carrot);\n    let potato = None;\n\n    let cooked_apple = cook(chop(peel(apple)));\n    let cooked_carrot = cook(chop(peel(carrot)));\n    // Let's try the simpler looking `process()` now.\n    let cooked_potato = process(potato);\n\n    eat(cooked_apple);\n    eat(cooked_carrot);\n    eat(cooked_potato);\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u7ec4\u5408\u7b26-and_then",children:"\u7ec4\u5408\u7b26\uff1a and_then"}),"\n",(0,t.jsxs)(n.p,{children:["map() \u88ab\u63cf\u8ff0\u4e3a\u7b80\u5316 match \u8bed\u53e5\u7684\u53ef\u94fe\u63a5\u65b9\u5f0f\u3002\u4f46\u662f\uff0c\u5728\u8fd4\u56de ",(0,t.jsx)(n.code,{children:"Option<T>"})," \u7684\u51fd\u6570\u4e0a\u4f7f\u7528 map() \u4f1a\u5bfc\u81f4\u5d4c\u5957 ",(0,t.jsx)(n.code,{children:"Option<Option<T>>"})," \u3002\u5c06\u591a\u4e2a\u8c03\u7528\u94fe\u63a5\u5728\u4e00\u8d77\u53ef\u80fd\u4f1a\u53d8\u5f97\u6df7\u4e71\u3002\u8fd9\u5c31\u662f\u53e6\u4e00\u4e2a\u540d\u4e3a and_then() \u7684\u7ec4\u5408\u5668\uff08\u5728\u67d0\u4e9b\u8bed\u8a00\u4e2d\u79f0\u4e3a flatmap\uff09\u7684\u7528\u6b66\u4e4b\u5730\u3002"]}),"\n",(0,t.jsx)(n.p,{children:"and_then() \u4f7f\u7528\u5305\u88c5\u503c\u8c03\u7528\u5176\u51fd\u6570\u8f93\u5165\u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u5982\u679c Option \u662f None \uff0c\u5219\u8fd4\u56de None \u3002"}),"\n",(0,t.jsxs)(n.p,{children:["\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c cookable_v3() \u751f\u6210 ",(0,t.jsx)(n.code,{children:"Option<Food>"})," \u3002\u4f7f\u7528 map() \u800c\u4e0d\u662f and_then() \u4f1a\u7ed9\u51fa ",(0,t.jsx)(n.code,{children:"Option<Option<Food>>"})," \uff0c\u8fd9\u5bf9\u4e8e eat() \u6765\u8bf4\u662f\u65e0\u6548\u7c7b\u578b\u3002"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'#![allow(dead_code)]\n\n#[derive(Debug)] enum Food { CordonBleu, Steak, Sushi }\n#[derive(Debug)] enum Day { Monday, Tuesday, Wednesday }\n\n// We don\'t have the ingredients to make Sushi.\nfn have_ingredients(food: Food) -> Option<Food> {\n    match food {\n        Food::Sushi => None,\n        _           => Some(food),\n    }\n}\n\n// We have the recipe for everything except Cordon Bleu.\nfn have_recipe(food: Food) -> Option<Food> {\n    match food {\n        Food::CordonBleu => None,\n        _                => Some(food),\n    }\n}\n\n// To make a dish, we need both the recipe and the ingredients.\n// We can represent the logic with a chain of `match`es:\nfn cookable_v1(food: Food) -> Option<Food> {\n    match have_recipe(food) {\n        None       => None,\n        Some(food) => have_ingredients(food),\n    }\n}\n\n// This can conveniently be rewritten more compactly with `and_then()`:\nfn cookable_v3(food: Food) -> Option<Food> {\n    have_recipe(food).and_then(have_ingredients)\n}\n\n// Otherwise we\'d need to `flatten()` an `Option<Option<Food>>`\n// to get an `Option<Food>`:\nfn cookable_v2(food: Food) -> Option<Food> {\n    have_recipe(food).map(have_ingredients).flatten()\n}\n\nfn eat(food: Food, day: Day) {\n    match cookable_v3(food) {\n        Some(food) => println!("Yay! On {:?} we get to eat {:?}.", day, food),\n        None       => println!("Oh no. We don\'t get to eat on {:?}?", day),\n    }\n}\n\nfn main() {\n    let (cordon_bleu, steak, sushi) = (Food::CordonBleu, Food::Steak, Food::Sushi);\n\n    eat(cordon_bleu, Day::Monday);\n    eat(steak, Day::Tuesday);\n    eat(sushi, Day::Wednesday);\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"\u89e3\u538b\u9009\u9879\u548c\u9ed8\u8ba4\u503c-defaults-or-or_else-get_or_insert-get_or_insert_with",children:"\u89e3\u538b\u9009\u9879\u548c\u9ed8\u8ba4\u503c Defaults: or, or_else, get_or_insert, get_or_insert_with"}),"\n",(0,t.jsx)(n.p,{children:"\u6709\u4e0d\u6b62\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u89e3\u538b Option \u5e76\u4f7f\u7528\u9ed8\u8ba4\u503c\uff08\u5982\u679c\u5b83\u662f None \uff09\u3002\u4e3a\u4e86\u9009\u62e9\u6ee1\u8db3\u6211\u4eec\u9700\u6c42\u7684\u4e00\u79cd\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u4ee5\u4e0b\u56e0\u7d20\uff1a"}),"\n",(0,t.jsx)(n.p,{children:"\u6211\u4eec\u9700\u8981\u6025\u5207\u7684\u8bc4\u4f30\u8fd8\u662f\u60f0\u6027\u7684\u8bc4\u4f30\uff1f\n\u6211\u4eec\u662f\u5426\u9700\u8981\u4fdd\u6301\u539f\u6765\u7684\u7a7a\u503c\u4e0d\u53d8\uff0c\u6216\u8005\u4fee\u6539\u5b83\uff1f"}),"\n",(0,t.jsx)(n.h3,{id:"or-\u53ef\u94fe\u63a5\u6025\u5207\u6c42\u503c\u4fdd\u6301\u7a7a\u503c\u5b8c\u6574",children:"or() \u53ef\u94fe\u63a5\uff0c\u6025\u5207\u6c42\u503c\uff0c\u4fdd\u6301\u7a7a\u503c\u5b8c\u6574"}),"\n",(0,t.jsx)(n.p,{children:"or() \u662f\u53ef\u94fe\u63a5\u7684\uff0c\u5e76\u6025\u5207\u5730\u8bc4\u4f30\u5176\u53c2\u6570\uff0c\u5982\u4ee5\u4e0b\u793a\u4f8b\u6240\u793a\u3002\u8bf7\u6ce8\u610f\uff0c\u7531\u4e8e or \u7684\u53c2\u6570\u4f1a\u7acb\u5373\u6c42\u503c\uff0c\u56e0\u6b64\u4f20\u9012\u7ed9 or \u7684\u53d8\u91cf\u4f1a\u88ab\u79fb\u52a8\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'#[derive(Debug)] \nenum Fruit { Apple, Orange, Banana, Kiwi, Lemon }\n\nfn main() {\n    let apple = Some(Fruit::Apple);\n    let orange = Some(Fruit::Orange);\n    let no_fruit: Option<Fruit> = None;\n\n    let first_available_fruit = no_fruit.or(orange).or(apple);\n    println!("first_available_fruit: {:?}", first_available_fruit);\n    // first_available_fruit: Some(Orange)\n\n    // `or` moves its argument.\n    // In the example above, `or(orange)` returned a `Some`, so `or(apple)` was not invoked.\n    // But the variable named `apple` has been moved regardless, and cannot be used anymore.\n    // println!("Variable apple was moved, so this line won\'t compile: {:?}", apple);\n    // TODO: uncomment the line above to see the compiler error\n }\n'})}),"\n",(0,t.jsx)(n.h3,{id:"or_else-\u53ef\u94fe\u63a5\u5ef6\u8fdf\u8ba1\u7b97\u4fdd\u6301\u7a7a\u503c\u5b8c\u6574",children:"or_else() \u53ef\u94fe\u63a5\uff0c\u5ef6\u8fdf\u8ba1\u7b97\uff0c\u4fdd\u6301\u7a7a\u503c\u5b8c\u6574"}),"\n",(0,t.jsx)(n.p,{children:"\u53e6\u4e00\u79cd\u66ff\u4ee3\u65b9\u6cd5\u662f\u4f7f\u7528 or_else \uff0c\u5b83\u4e5f\u662f\u53ef\u94fe\u63a5\u7684\uff0c\u5e76\u4e14\u5ef6\u8fdf\u8ba1\u7b97\uff0c\u5982\u4ee5\u4e0b\u793a\u4f8b\u6240\u793a\uff1a"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'#[derive(Debug)] \nenum Fruit { Apple, Orange, Banana, Kiwi, Lemon }\n\nfn main() {\n    let no_fruit: Option<Fruit> = None;\n    let get_kiwi_as_fallback = || {\n        println!("Providing kiwi as fallback");\n        Some(Fruit::Kiwi)\n    };\n    let get_lemon_as_fallback = || {\n        println!("Providing lemon as fallback");\n        Some(Fruit::Lemon)\n    };\n\n    let first_available_fruit = no_fruit\n        .or_else(get_kiwi_as_fallback)\n        .or_else(get_lemon_as_fallback);\n    println!("first_available_fruit: {:?}", first_available_fruit);\n    // Providing kiwi as fallback\n    // first_available_fruit: Some(Kiwi)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"get_or_insert-\u6025\u5207\u5730\u6c42\u503c\u5c31\u5730\u4fee\u6539\u7a7a\u503c",children:"get_or_insert() \u6025\u5207\u5730\u6c42\u503c\uff0c\u5c31\u5730\u4fee\u6539\u7a7a\u503c"}),"\n",(0,t.jsx)(n.p,{children:"\u4e3a\u4e86\u786e\u4fdd Option \u5305\u542b\u4e00\u4e2a\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 get_or_insert \u4f7f\u7528\u540e\u5907\u503c\u6765\u4fee\u6539\u5b83\uff0c\u5982\u4ee5\u4e0b\u793a\u4f8b\u6240\u793a\u3002\u8bf7\u6ce8\u610f\uff0c get_or_insert \u6025\u5207\u5730\u8ba1\u7b97\u5176\u53c2\u6570\uff0c\u56e0\u6b64\u53d8\u91cf apple \u88ab\u79fb\u52a8\uff1a"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'#[derive(Debug)]\nenum Fruit { Apple, Orange, Banana, Kiwi, Lemon }\n\nfn main() {\n    let mut my_fruit: Option<Fruit> = None;\n    let apple = Fruit::Apple;\n    let first_available_fruit = my_fruit.get_or_insert(apple);\n    println!("first_available_fruit is: {:?}", first_available_fruit);\n    println!("my_fruit is: {:?}", my_fruit);\n    // first_available_fruit is: Apple\n    // my_fruit is: Some(Apple)\n    //println!("Variable named `apple` is moved: {:?}", apple);\n    // TODO: uncomment the line above to see the compiler error\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"get_or_insert_with-\u5ef6\u8fdf\u8ba1\u7b97\u5c31\u5730\u4fee\u6539\u7a7a\u503c",children:"get_or_insert_with() \u5ef6\u8fdf\u8ba1\u7b97\uff0c\u5c31\u5730\u4fee\u6539\u7a7a\u503c"}),"\n",(0,t.jsx)(n.p,{children:"\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a\u95ed\u5305\u4f20\u9012\u7ed9 get_or_insert_with \uff0c\u800c\u4e0d\u662f\u663e\u5f0f\u5730\u63d0\u4f9b\u4e00\u4e2a\u53ef\u4f9d\u8d56\u7684\u503c\uff0c\u5982\u4e0b\u6240\u793a\uff1a"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'#[derive(Debug)] \nenum Fruit { Apple, Orange, Banana, Kiwi, Lemon }\n\nfn main() {\n    let mut my_fruit: Option<Fruit> = None;\n    let get_lemon_as_fallback = || {\n        println!("Providing lemon as fallback");\n        Fruit::Lemon\n    };\n    let first_available_fruit = my_fruit\n        .get_or_insert_with(get_lemon_as_fallback);\n    println!("first_available_fruit is: {:?}", first_available_fruit);\n    println!("my_fruit is: {:?}", my_fruit);\n    // Providing lemon as fallback\n    // first_available_fruit is: Lemon\n    // my_fruit is: Some(Lemon)\n\n    // If the Option has a value, it is left unchanged, and the closure is not invoked\n    let mut my_apple = Some(Fruit::Apple);\n    let should_be_apple = my_apple.get_or_insert_with(get_lemon_as_fallback);\n    println!("should_be_apple is: {:?}", should_be_apple);\n    println!("my_apple is unchanged: {:?}", my_apple);\n    // The output is a follows. Note that the closure `get_lemon_as_fallback` is not invoked\n    // should_be_apple is: Apple\n    // my_apple is unchanged: Some(Apple)\n}\n'})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>l});var t=o(6540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);